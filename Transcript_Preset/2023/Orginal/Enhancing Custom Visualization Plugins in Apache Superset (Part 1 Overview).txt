 Let's go ahead and kick this thing off. Today we want to Introduce you to a bunch of enhancements you can do on your custom visualization plugins that you've built in Superset If you haven't seen it already there's a blog post that this goes along with and we'll talk about that too And if you haven't built a vis plug in before we'll also be able to provide some resources that are good start for that But first off, let's kick it off with some introductions. I'm Evan Rosakis. I work with preset, which is a posted version of Superset and Has several other bells and whistles, but I Also have here today Michael Molina who's another Superset PMC member. Thanks for joining Michael If you're not familiar with them has done a bunch of work on various charts He's worked on the drill to detail features and the drill by features. He's written migrations to deprecate legacy plugins He's added a slew of today's features to Superset's new waterfall chart, which hasn't been released in an official Apache version yet for this community soon And he's an authority on all sorts of stuff that we're gonna be talking about today Hello, Evan someone's is commenting that out is a bit low. Oh, is it me? Okay, maybe I'll move my microphone a little closer. Hopefully that helps Thank you. Thank you. All right, so then first things first Let's talk about how you can interact with this whole presentation today The most important is that all of you should be on slack if you're not already so let me go ahead and drop a link with a slack invitation into the chat And then there's also the Q&A tab, which is very important. You should see that in your zoom controls Control bar and if you have a question, I would advise against asking get in the chat string because that just kind of flows by but the Q&A tab allows us to address these questions in an orderly fashion Yeah, then you know email as a last resort if you can't hold of us otherwise So what we're talking about today is like I mentioned a blog post That just got published recently and we kind of wanted to go through a live version of it Here's the link to the blog post itself and as you can see this is part one so There are some new plugins landing on the repo recently that we could talk about if anyone's interested There's a there's a new map thing that's landing and possibly another different map soon To just mention that In big US Lee intentionally, but what we want to cover today is all of the basics of the things you can add to your custom visualization So this is kind of a big overview and an introduction It's worth mentioning that it's oh yeah the carto diagram plugin developer is here. Yeah. Thank you for that PR. We are taking a look at it. I promise it's awesome So Yeah, this is for those who have already kind of built their first skeleton of a plugin perhaps using our prior blogs and videos and this is going to add Different layers as we go through these blog posts and presentations and hopefully will build up a comprehensive knowledge base for plugin development But today we're just going to start from the top So why would you do this? Number one, of course make your users happy you want to have a feature rich plugin that's going to have all the the nifty bells and whistles that plugins on to have but also you know if If super set as a project is going to adopt your plugin We want to make sure that it has all of the things that are expected by users and If you have all of these things that are kind of the the must-haves and the should-haves as far as features go Then we consider that a tier one plugin. It's kind of just an official term We use to say that it has all of the things and access like a gold standard for users and as a code reference for other plugin developers So let's get into some of these individual things but Sorry, I got there's one more slide in here, but this As mentioned this is a series so we're not going to get into everything we won't be able to answer all your questions today about all the nitty-gritty specifics We'll do our best at the end, but We also need to mention that as we go through this series and start to show code and examples of these features being used that not all of these plugins are created Equals so if you built with e-charts, that's cool NVD3 is deprecated, but people still build the stuff with D3 Technically any JavaScript Visualization framework could be used in a plugin for all sorts of reasons, but what you get out of the box for free Will differ and how you implement these details will differ from each of these plugin frameworks Okay, so the must-haves If you want to get anything into the superset code base, you've got to have this stuff number one Most important thing is chart metadata And we're going to go into a lot of detail about this later in the presentation, but these are the things that add all of the details in the chart picker or the vis gallery whatever you want to call it when you're adding a new chart and superset so you can see all the thumbnails and descriptions and tags and various forms of display of feature support then Color palette support so There is another blog post which I can send you a link to real quick that explains all about how Custom color palettes can be built and applied to charts in dashboards or in the chart builder and Your plugin will want to support these especially with the like custom overrides that people sometimes do where You you might map a certain color to a certain series in your data Dynamic controls are Another thing we're going to get into in a follow up coming very soon because this is kind of essential a lot of people when they build their first plugins They think oh, this is going to be simple and then before you know it you've got the problem of having a giant wall of knobs and You've got little selects and switches and sliders for all of the things that your plugin can possibly do But you want to make it an orderly user experience with kind of a progressive reveal of controls that are relevant So this is just one example where you don't need to show this little inner diameter or inner radius Slider until you've actually selected that it is a donut chart you click that little checkbox nice Control panel appears there's some other stuff along these lines to make your control panel better And we'll get into all that stuff too And another must have is that if you are building a plugin You should recycle Adhere to the dry principle which is don't repeat yourself So if you're adding controls to your control panel you should use them from the shared controls library that's built into superset and It will get into all the details of all those ones that you might want to use and it'll make your life a little easier as you build out that control panel Also superset includes react storybook, which is a gallery of where you can see all or most of these plugins in action try them out and try out a little knobs and sliders there And this is also a great way for developers to make sure that features are maintained And then of course as far as maintenance goes tests are very important whether it's unit tests or end-to-end tests and we'll get a doll of that in the future as well All right, so then the should have those first things are like table stakes got to have them but then We get into things that you ought to do if you're building a plugin and generic chart axes are one thing we've talked a lot about lately if you can come to these other meetups and the The only reason this is not a must have is that not all charts have axes So if your chart does have an axis then and it's not a table or a night and gale rose chart or you know whatever then If it does have an axis you should support this feature which superset was built originally to be a kind of a time series database client drew it to be specific but as it's evolved over the years there have been more and more databases supported obviously and a lot of them A lot of these the use cases are built around categorical rather than You know temporal charts so now this works and your chart should support it too Especially because generic chart next is enabled by default right now. Oh, that's true Yeah, we should talk about the future flag So if you are running an older version of superset you'd want to turn on the generic chart axes feature flag but as of 3.0 This feature is on by default and that feature flag is deprecated So actually things are going to be simplified in the code base soon for a lot of plugins and Yeah, this is going to be you know prime time feature Okay, then normalizing and denormalizing the form data This one's a little funny, but it's something that got added recently and has made the user experience a lot simpler In a nutshell, you can switch between charts much more easily than you used to be able to it used to be that if you switched charts It would just kind of nuke all your form data in the control panel But now you can switch charts more smoothly meaning that Control values are maintained from one plug into the other so here you can see that the that metric is presented or preserve rather as you go from in this case a bar chart over to a different chart and Also, it maintains the non-shared values to say you use that inner radius control on a pie chart And then you switched over to a table chart that inner radius control is no longer relevant, right? But rather than destroying that value It's maintained in memory So when you if you were to switch back to the pie chart, then that control was restored So it's kind of it's safe to maneuver around between different chart types as well as being smoother so we will get into how you can support that And a contextual menu support this is Basically the little menu when you right click something in a chart You get these options that will go into like drill by drill to detail cross filters You've covered all that stuff in previous meetups But that little menu is actually something that you'll want to support in plugins and not all libraries support this very well For example, the now deprecated NVD3 does not play well with that which is one of the reasons it's on the way up And as far as those features that go under that contextual menu We've got drill to detail which shows a tabular representation of the data powering a visualization You've got drill by which we have a blog post four in case you haven't seen it and there are even meetups and so forth But this is a hot feature, as you could say Where you can you know drill level after level into various dimensions of your data Hierarchical or otherwise And then cross filtering which allows you to click on say the bar of a bar chart or something like that wedge of a pie chart and emit a filter to the rest of the charts in the dashboard that are scoped Um somebody's asking if they can do drill with a map if you want to stick that in the Q&A tab we'll circle back to that Um, there is a bit of an open question with unity about that then Let's see Oh currency formatting so yeah, we've added some features and superset recently that allow people to configure a default currency and number format in their configuration And there have also been enhancements that allow you to set that on a per column basis at the in the data set editor or supersets semantic layer And you can also support This sort of formatting within your chart controls So if you want to build a chart that allows you to pick a currency or set a number format Specifically for that chart then you can add to these controls if you can even do it Then you can get in with it. We'll get into that Um and legend in direction. This is another thing that depending on your library You may or may not get kind of for free You might not have to add a lot of custom event handlers and your JavaScript code but Um It's a nice thing to be able to Click on the legend and have some interactivity to select or deselect series Uh, like you see in these screenshots Incidentally, Michael added the all-in-inverse little buttons there. So thank you for that Yeah, that's helpful when you want to compare different series Yeah, absolutely um and then the as needed features so these are things that are kind of the odds and ends The brick-a-brack the junk drawer of features, but there's a lot of good stuff you can add advanced analytics is one um This is advanced. There's quite a lot to talk about here but For example, one of the things you might do is say you're building a line chart and there's no old values in the series You can add this uh zero imputation fill method and it'll make it a complete line instead of a few random dots Or line settings. So um, you know time comparisons all sorts of Fun stuff you can add there which will affect your query that underlies your chart conditional coloring. This is uh, there's various ways to approach this actually as a feature in terms of UI This is just one random screenshot where uh, you can set kind of thresholds and have shaded colors, but this can um This can interact with your dashboard color palettes Uh, you can make it a little more bespoke, but um, it's another feature you can add Then post processing operations. So this is something where you'd actually get into the Python side of things uh Not so long ago the superset plugins were Rearchitected a bit so that they could be entirely java script instead of requiring python But there are certain use cases like say pivoting a pivot table where you'd want to use um, you know pandas or something on the back end In python to transform your data in a specific way before ascending that result back to the client your browser So you can extend the python uh, codebase to support different Post processing operations or have your plugin utilize ones that are there to there Then predictive analytics uh, this Is leveraging the profit library Which exists to just take the data that exists run it through that library and uh, you get confidence bands and All of that fun stuff that you can draw on your chart in numerous fun ways I didn't take too many screenshots of this chart, but actually there's a lot of uh Different ways you can visualize this Then annotation layers uh, I'll be perfectly honest. This is not supersets easiest feature to use or develop around Uh, this feature needs some love. It's not supported by every chart, but it does exist and it can be improved Uh, we hope to get around to that as a community effort one of these days, but uh, you can Add an annotation layer to a chart using a secondary chart as a source of those annotations um, so you can set up your chart to be either Source data or you can set it to pull in data from another chart Um, and there are some document There is some documentation on this feature because you haven't played with it So I'll just drop that in the chat as well I probably have more links to more of this stuff by the way I might be skipping a few links that we can follow up on later. So if anybody wants resources Just call it and we'll we'll get them in the q and a times lap so then uh That's kind of an overview of the most commonly added extensions that you might not get with a vanilla plugin out of the box when you use the The code generator to kind of build the scaffolding of a plugin and just you know, make some data appear In a visual manner on screen Uh, we're going to get into all of those things in some depth in coming blog posts and meetups But today what we wanted to get into a little bit is that first one Uh of the must have the table stakes which is metadata Uh, and all of this is on that blog post which I want me to again right here But just to cover it briefly Wanted to show you the type definition which exists in the java script code base and Shows you all of the metadata that you can add to your plugins definition We go into each one of these on the blog post so I won't hit all of them But we'll we'll school through the blog post in a second and kind of hit some highlights You can also see an example configuration This one's from the echarts generic chart plugin which can be used as a you know line chart area bar chart whatever And you can see some of these things about the generic x-axis that we were talking about earlier like there's some little turnery switches in here where If it you know depending on what their generic x-axis is turned on or off with a chart name or the chart description actually change and That's some stuff we're going to clean up later than that feature flies officially gone But looking through it You see some of these different things like behavior We talked about those features like drill to detail and drill by so if your chart supports these then you would add those behaviors there And that actually enables some other little bits in the code that Make it work Similarly interactive chart perhaps this isn't the greatest name in the world, but that means cross filters Um then you can add a category you get one category to drop your vision to you you can certainly add more Um, but I wouldn't I would stick to the existing categories and superset Unless you're creating all swath of plugins all on your own the idea is to kind of group them together and keep them organized um Then credits I guess you could use this for all sorts of different things like say you had a particular author that worked on it But typically you would use this to uh to give some credit back to the open source community if you use the library or something like that that you want Give a shout out to The description goes into the uh This picker right here just get the head of slide um Yeah, so here yeah, maybe this is a better way to walk through it Uh, yeah, you've got your description here. You can have as many labels as you want this thing scrolls which is nice Uh, you can add thumbnails within Your plugin and you can add is again as many as you want and it but also schools So if you have a plugin that has all sorts of different layout modes or different features and bells and whistles Your users can enable it's really nice to show those there so people can look around And figure out what plugin they want to use and say oh this does do the thing you want to do. It's got the tool tips or whatever um And then these are some tags up here that are actually highlighted within the superset code base I think you can uh adjust this on your installation if you need to and you run superset on your own but uh Popular is kind of actually a reflection of that tier one plugin support that we were mentioning that If if you click popular here, you get a list of all the charts that include the bulk of those features that we just ran through And if your supports those then stick it in there when you open your PR that'd be fantastic um Oh, and that was going to switch over to the blog post itself Which is right here Um, so we talked about credits and thumbnails and behaviors I think there's a couple of other behaviors, but I don't remember them off the top of my head honestly uh Then Let's see Yeah, these ones are where it starts to get interesting and I think we'll cover these in those future blog posts But like uh can be annotation types means that your chart will support Other charts as an annotation layer and uh This is the the inverse of that where you can it will say that your plugin will support a different chart As an annotation data source And deprecated is something that got snuck in there just to kind of hide old plugins If you start looking at supersets code based around plugins You're going to find that there are actually a bunch of legacy plugins that use an older api endpoint and have a bunch of things like they use Some python code that we're trying to slowly get rid of And some of these are at the point where They shouldn't be used by users to create new things Uh But we can't just delete them yet And the reason might it is usually that you have dashboards built with these charts that are kind of legacy dashboards using these legacy charts And over time we're going to be building migrations so that we can actually get rid of those charts with more replacements and then remove these deprecated charts But long story short this hides them from the this bigger Um Query object count there are certain plugins that allow you to do Multiple sequel queries and take multiple sets of data mixed time series is one example, but there's all sorts of things you could invent with this Uh Pretty much every plugin except for a couple of exceptions uses just one query, but you know you could go nuts Depending on what your use cases are Then uh label. Oh, yeah, that's this. I don't know if you can see it But this little tiny thing that says featured You can add featured or you can add deprecated And you can add Customized descriptions that go over that to say why it's been deprecated or why it's featured if you want to get a little more Descriptive there So I think this is the bulk of the stuff That I wanted to show just as an overview so If you have questions about any of these features what they mean what they're for how they're developed Or if you think there's anything missing from this kind of overview that's that's the stuff. I'd love to dig into in the Q&A Um And then we can kind of start to build This knowledge base and build these presentations around diving into more of the specifics including code Um, and maybe even building some of these plugins with these features We've got a couple of plugin ideas in mind that would be new ones we'd like to add to supersets So those might be a good thing to kind of build over the coming weeks Uh or we can go through some of our Older plugins Michael and I were just talking about doing a sort of plugin feature audit And so we're probably gonna turn up a couple of plugins that are missing a couple of features And maybe we can bolt those new features on and talk about those PRs and upcoming webinars Um But the next one I was planning on if you're interested and let me know if if you're not is getting into those dynamic controls And So there's a few other things that would be included there um We're in my little notes go but They are um, so there's What I guess you would call conditional controls, which is when uh Like the example I showed where one control might hide or show itself depending on the value of another control There's um dynamic controls where you can change the value of one control based on another control So they're kind of adjusting themselves as as you move around then um Yeah, we can go into all of the shared controls that are available out of the box for you to build your plugin with what they're for And you know little caveats pros and cons And then there was I think one other kind of kind of Um Thing I wanted to cover movies this year. Oh yeah instant controls. That's right. So Some of the controls in your control panel will actually adjust your query and need to go fetch data from your database But many of them that just tune the display properties of your control and change a prop on a react component or something like that can be instant That's what the little lightning bolt is usually used for in the control panel. So we'll teach you about all of that um And yeah, that's the next episode So That's what I wanted to get into today and um, let's see we've got a few questions and Let's get into it um One of them was are there any plans to revive the dynamic plugins and Absolutely yes, but this is kind of a big architectural undertaking So the story here for those that don't know is Uh, we do want to make it so that superset is eventually more like your browser or your IDE where you can just kind of add plugins by saying here's where the plugin lives like a URL to a JavaScript bundle and then it'll just load into superset um We last time we were working on that was probably a couple years ago uh and At the time we were on web back three or four I believe But since then we've upgraded to web back five and web back five allows a lot more um functionality around Dynamic loading of remote JavaScript modules that didn't exist earlier So in the prior iterations and attempts at dynamic plugins, we had to do a lot of kind of hacky stuff to make it work But I think it's a lot more plausible now We just need to talk about all the UI details all of the kind of schemas of how these things are stored and superset and Yeah, there's a lot of little moving parts and making that work Especially since once we release that as a feature we're going to have to support it basically forever Uh, so we want to get it right Then uh somebody says is there a 3d CAD model plugin data that interacts with a 3d model and no um I do remember somebody mentioning this on slack asking about it and I don't know all the different CAD data formats. I imagine there's some sort of thing query for that's going to give you some sort of You know point cloud data or you know vectors and you know edges and vertices um Something that you could query that would feed a CAD plugin and if there is a JavaScript library that actually takes that sort of data You can counter from a database and draw it as 3d and get some controls to spin it around and whatever you want to do then heck yeah um We'd love to see that Uh, I think I should also mention that if you do want to contribute one of the plugins that you're building to Superset open source it has to be licensed compatible and There's a couple of things there actually so the code has to be licensed compatible with the Apache license uh, and there's a there's a whole slew of software licenses that work in that model But the other thing is that being an open source project we can't usually rely upon paid services to make the plugins work that we support in open source So uh, we do have certain plugins that require licensed keys like for example the map box one comes to mind where you have to have a map box API key But you can go get that thing for free so it's not It's not like a deal breaker you don't have to pay money. So it's kind of On the edge there of open sourceness if that's a word um, but if we do do a CAD one you know It shouldn't be some CAD software that cost you thousands of dollars a month to display this data Should be something that you could get an API key and use for free Um On how does the localization for chart metadata work? So I think there might be a quick Capture of that right here. So um, this little T Method that wraps a lot of strings here is the javascript translation framework that we use under the hood So if you have a bunch of stuff you want to translate From from this part of the code basis perspective you just wrap a T around it and there you go It'll magically work except that it won't because those translations don't exist So in the superset documentation There's um an area where you can add translation strings. There's all these files that end in .po Uh, don't remember don't ask me what that file extension stands for But um you can go in there and Add the English string as a key and add Whatever other language you want as a value and these Language files exist for numerous languages Uh, thanks for the link. Oh, oh send it to me as a direct message. You need to send it to the whole crowd Oh, no, it seeks that um, but uh Yeah, and then uh, oh that's to host some panelists. I think you need to send to everyone Um But then uh Yeah, so once you've created these strings in the correct language file you there's a little script You can run and that actually flattens out the .po files to json and that gets picked up by supersets from them when it's running Um, so it's a little bit of a goofy process that's probably something we should actually add to our Our docs and our webinars we go forward with this stuff um Then Somebody's asking about enabling cross filtering on one of their map plugins um And yeah, so this is something that you'd There's quite a lot to it actually you're gonna have to probably touch a fair amount of files I don't know if you want to answer this one Michael, but we need to support the contextual menu Um, and then there's There's Emitting the cross filter and there's receiving the cross filter is kind of the two main areas of work um Yeah, I think you need to enable the behavior the first one uh interactive chart behavior in your metadata file and then it's just a matter of adding listening to the events of your library And then just using like you can for example use the same example as like a line chart that contains the logic to handle uh cross filtering So you just like the reason to the event your chart and then propagate some information to the to superset And then that dimension when you click on it will automatically appear in the chart menu So it's pretty simple with just a matter of like Connecting the events to your chart library Yeah, so the plan here is to show some code examples when we get to that segment so um When we do cross filtering will probably use e-charts as an example since that's typically what people are going to be building their plugins around but um that code might vary wildly if you use in like a d3 map or you know some other map on that or a different library completely might be building it something with vx. I don't know um But then Actually related to um Which maps perhaps as somebody asking can drill by and cross filtering be enabled for non e-charts custom plugin charts and the answers yes absolutely yeah, so um Well one thing I should have mentioned is that most of these when we talk about those things that are in the contextual menu like drill by drill to detail and Cross filters at least two of them the drill to detail and drill by ones are also Available via the little three dot menu at the top right of a chart when it's in the dashboard um But most users we find expect to be able to right click the chart so Whatever you're building your chart with um it needs to be able to support the event handlers to capture that right click and append the little menu And then the rest of it I think you can be handled by Pretty much any framework you'd want to use is it's it's external to the vis itself because you're going to be popping open all the drill by a step in a modal Net modal is handled by superset not by the plugin library so it should be all good Um cross filtering is the same way there's there's a A layer called uh data mask that receives these This cross filter event um that says what the filter is and will filter down the data set and Then it's up to your chart to display that appropriately whether you want to kind of hide the other stuff or dim the other stuff That's that's up to you as a plugin mother I think we got to all the questions there must be more questions If anyone has anything that they want to add the q and a tab is wide open at the moment This went a little faster than I expected to so if you have questions on what these features are in general um happy to kind of go back and Talk about A little bit more detail on how you can implement all of these but we don't have the code examples for the bulk of them available yet And I'm just going to share And the times here is chart code that's like a good example for how you connect and listening for events and then I'll do you like what kind what type of information and reach a sample to pass to superset for that you have In real life in due to detail and cross filtering available to Yeah, just Hey, if you just check the Below All right, I've got too many zoom controls in the way and I can hardly see what I'm typing Um, no problem There's like event handlers. I think there's a constant code event handlers And it's online One three nine Yeah Yeah, this one So for example here you can see we're using e charts and then the chart library just accepts a configuration call event handler So you configure like week events you listen to So here for example, we're listening to like click event mouse out mouse over Legend state changeance context menu that's the right click and then here like we just Example information that we need to can you scroll down a little bit? Roachy More a little bit more a little bit more Yeah line 214 like on context menu. So This is like the information that you need to pass to enable through to detail cross filtering and real life So this is one example So if you have like a different library than e charts is the same process You just need to listen for the events of your library and then assemble this context and call discussions and then everything will appear in the menu And I guess it's kind of kind of similar for the legend interactive legend support to um There you're gonna be yeah There's a there's a if you scroll a little bit up. There's like events for legend state change Little bit more and so wine Uh 156 yeah 11 state change. Yeah, legend state change Yeah, so pretty much like here react to this Like changing your legend Yeah, so a lot of these things are gonna vary Pretty wildly depending on how your plugin library is built But it's generally possible And as far as things that are possible in the level of detail that people want to get into this is one of the reasons we wanted to do the overview today Was so that I can actually get some of your feedback. So I'm curious from the folks that showed up here go ahead and use the chat But Let us know kind of what level of detail you're looking for as we do the next iterations of this in the coming weeks in the next blog post and If there are any features Uh of plugins that you're looking to develop that we can more directly address And if you don't want to do it in the the chat right now or if you're seeing this on YouTube in the future A little future people then uh just DM me on Slack or drop it in the uh Uh the customizing superset or improving superset And those are both fitting But yeah, let us know what you want to get into and uh we will address things Oh, yeah, somebody that's talking about uh the package JSON and what that's all about uh Yeah, maybe that's another topic we should actually get into is how the dependencies work with plugins But it's a little funny for those of who have built JavaScript applications before using npm Um all of your dependencies Like let's say you're using each hearts to build a plugin would go in your um your regular dependencies Um in your package JSON which I guess I could probably find I think on superset content Oh, yeah, I could just look at the main one. I was going to look at a plugin one Yeah, let me show you a plugin one because that's where they get a little unusual um So This particular plugin needs these libraries to exist like you can't have any chart without each arts right Uh, but then some of these other ones are actually pulled from elsewhere in superset That already exist in the main code base. So peer dependencies are chart controls that I was alluding to those Uh controls you can add to your control panel that exists elsewhere. That's where they come from There's all sorts of other little helper libraries and utilities that are in superset UI core And then of course it's a react application so you must have react so um all of this stuff goes in your package JSON file including uh the stuff that's going to be published to npm like the title and the entry point for the code but um And then when you actually bundle that up and you say npm install and it'll create what's called a package lock file that somebody was asking about here and That package lock file is all of the versions that like this one has this little carrot here So it's looking for d3 array that is one dot two dot x basically and So When you install it your package lock version will have the exact version of that dependency um That's a short version of its one I think let me know if I didn't address what you're actually asking Uh related question is there planned to add a custom chart Without using a fork of superset um Yeah, you already can actually uh I should dig up the link to this and uh Send it but I don't want to go Diving around YouTube right now, but there was uh There was a meetup that happened a while back um with a PMC member from Nielsen that was talking about deploying plugins and Long story short they just need to be on npm then That's to so to develop a chart you don't need a fork i should say You can develop an npm package that's The vis plug and it's a JavaScript module it can live on its own be anywhere on the internet really um But if you want to install that remote package Any random npm module that is a superset vis plug and Currently you do have to change the code base of superset There's a file called uh main preset dot ts I believe and then there's like a set of extensions dot ts that you might have to touch But those two files are where you actually instantiate the plugin You say here's the little key name for it and here's where the the package lives So Yeah, you you'd install the npm package you'd load the npm package and that stuff still has to happen in code So you would need to Change your fork or if you're a preset customer, you know contact us That preset and we'll we can we can do some the mastic to get that to happen um Yeah, I don't know how to address this one And maybe it's worth mentioning on that note that all of the plugins that are in superset are their own npm package superset just happens to be a monorepo So there's actually And As you as I was just a living to this this package Jason file is part of one plugin and all of the plugins are right here So all of these are their own little npm modules and in theory you could use these outside of superset Um, there is a way to do so. It's not widely done, but it can be done um And thankfully now that they're all in sync with this it's a heck of a lot easier to maintain Things than it must be And it's possible to see a code block of drill drill up drill down cross filter functionality on that box Dasha, I don't know if you'd have to go speak lunging just as much as me, but If I were to dig into This source I wonder where it is. I'm not looking for it. Maybe we'll get lucky Yeah, I don't know we're gonna have to go um Drilling around in here and find it But this which I'll drop in the chat is the entry point to the map box code Actually, Evan, we don't support it We're not in the map box because it's a legacy one so what one way to quickly see if the plugin supports or not It's just go to the plugin mix. So you if you just check like index chaos you see that there's no behavior Oh, I associated with like a drill to the theorem. Okay, I thought that emitted cross filters at least Yeah, it's not in the behaviors. There's no behaviors entries whatsoever Um Um someone's asking about using the backend APIs to create views in a separate front end app. Yeah, it's an open API. You can build whatever you want with it It's not in the scope to building his plugins, but yes, you can build all sorts of things you can also build uh embedded dashboards using the embedded SDK That's kind of halfway to what you're talking about All right, well seems the questions are slowing down um So if we didn't get to anything that you were asking then by all means Reach out to us and Again, please do ask questions because this is gonna be informing where where we go with building out the future blog post that go more deeply into code for each of these features There will be several of these blog posts and probably One of these kind of webinars every two or three features that we document and blog posts and just kind of dive into the code and look at working examples and tweak on things so If you were looking for mark code digging today then you know, we'll get to that soon Um, and yes, this will be shared. It'll be on YouTube soon and anyone who registered for today's event will receive that link soon Okay, we'll give everybody 14 minutes back ish and Thank you very much for joining today And thank you, Michael for co-hosting I appreciate all of you and we'll see you on slack Thank you