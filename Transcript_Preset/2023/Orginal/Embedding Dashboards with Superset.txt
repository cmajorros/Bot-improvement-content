 And hey, all early joiners. Thanks for hanging out with us for a minute as we accidentally started a webinar early. I'm Will Pringle. I head up our sales engineering efforts at preset. I know I'll give it a few more minutes for those to join. But Evan also want to pass it off to you for some interest. Yeah, sure. Hi, I'm Evan Rusakis. I work with preset and I'm part of the Apache Super Set community as a PMC member and you probably probably talked to many of you on Slack and other for a and very happy that Will is here to talk about embedded, which is one of the big use cases that comes up over and over again in the community and with our preset customers. Just wanted to go ahead and give people a couple of ways to communicate with us before we get into the demo itself and let's see, there's a few things, a few things really one is you should all be on. Super set slack by now, if you're not already and if you aren't a member here is the link with which you can join. And then once you're in there, you'll find there's actually two channels. You can communicate with us in about embedded there is a general embedded channel just hashtag embedded. But then just for today, I started a slack channel on there as well that's meetup dash embedded. We're going to try starting a new slack channel for each one of these meetups that we do. So that's a good place to ask questions that are specific to this gathering and this presentation and if anybody watching the recording of this later wants to follow up with questions they didn't get to ask during the live presentation, that's the place and I'm going to hit my do not disturb button. But then also. Yeah, sorry, I got distracted there. I think that's the main thing is ask questions. I'll slack the other thing I was going to say is don't ask questions on chat. If you can help it, there is a Q and a tab. Go ahead and drop your questions in there and that's a much more manageable way to handle these things. So I would appreciate it if you put your questions in there. And I will hand it over to Will if you'd like to use your already did introduce yourself, but yeah, take it away and thank you. And again, for those who just joined I had up pre sales here at preset. So happy to further discuss these in later conversations as well. As Evan mentioned, I will keep an eye on that Q and a so please drop questions in there. So in terms of our agenda, we'll talk a little bit about best practices around preparing your data for embedding dashboards, then going into enabling embedding, going walking through a little demo of how it would make some more specific data for our customers accessible in an external application. I've been talking through some configuration options, styling, best practices, etc. And while obviously leave some time open for questions, and I see we have some questions rolling in already. A lot of the early part of this is going to be focused on specifically enabling with preset that is given that presets API and features make this ready to go out of the box. And I can take some of those questions related to superset deployment more specifically into the slack thread later on. But a lot of what we talk about with styling and the best practices here are going to be the same whether we're working with preset or superset here. And really that the core of that is focusing on the data set center approach. So while there's not going to be a limit to how many dashboards we can embed, how many data sets those dashboards are built off of. So you're going to make our lives a lot easier. If we can simplify this down to some common data sets that contain all the all the different iterations of data that we'd be looking to embed. For example, if we were looking at a simple customers table where we want to embed within our application, just a view of customer a data. The more we can get that into common data sets, where we can very easily limit what rows of data our customers would have access to. The much easier time we're going to have implemented embedded dashboards into our application, both through the dashboard building process where we can really build just one template a dashboard. But also on the ease of use of how we'll authenticate these users to view these dashboards which will touch on in a minute here, but where we see embedded go really smooth is when we've done this data prep. So we're going to try to start to build our dashboards so that we can make this much easier to work with going forward. And we'll drop this in the chat, but if you don't have access to embedded in preset, you can always reach out to us through this URL. Next will allow us to turn it on for your preset instance. This is behind a feature flag for those running supersets. So we enable that feature flag for our preset customers there. So you'd be able to follow on the steps that will walk through here in a moment. And the first thing we'll do is build obviously a dashboard that we want to embed. So we get a dashboard to a point where we're ready to embed it. All of the same styling look and feel that we see within preset here will ultimately be rendered into our application. So any edits that we want to make whether that be for the properties of the dashboard such as the color scheme, or if we want to add CSS styling to make this look and feel match our application even more. All of this will be passed through when we embed this into our application. So the first step is really getting that dashboard to the point where you feel comfortable embedding it. We now will leave those changes as we already have this pretty well set. And then provided that that feature flag has been turned on in your instance, you'll see this embed dashboard option under the dashboard menu. And first that will show up as non activated. So the first thing we would do is enable embedding. And this is going to give us all the relevant parameters that we'll use in a minute to create guest users who have access to this dashboard. This also is the point where we can white list only certain domains where this dashboard will be able to render. We want to make sure that it will only be listed at superset.example.com. We have that ability to limit it for additional security here. And the next step is we're going to use those relevant parameters to make an API call. And we're going to note the workspace ID, team ID, domain and dashboard ID. And we don't have to worry about that too much as we can always come back and see those parameters. But we will use those as we make an API call here in a moment to generate a guest token that has access to this dashboard in our external application. And this is what's very different between preset and some other solutions embedded is we're not going to rely on cookies or a named user on the backend. We're going to generate a JSON web token that has temporary access to this dashboard and with limited data access that can be used as well. And we create that one template and dashboard that has access to many different criteria within this data set. In this case, we're looking at some flight data where we have access to all of the different origin airports and all the different airlines here. But when we go to embed this in our application, we're going to generate a guest token that only gives them access to certain origin airports in certain airlines data. And so what this will look like a little more visually and we can share these slides afterwards as well. Is we're going to make a call to this API endpoint. And we're going to reference the team ID and works space ID provided that in that embedded modal. And we're going to look at some basic metadata that we're going to pass through this way we can provide analytics back to you in terms of who's been looking at different dashboards and what type of dashboards they've had access to. We're going to pass through what dashboards they should get access to in this case. And we wrote a little security parameters that we should have applied to them as well. So what that might look like. In an actual payload here is if we wanted to embed two dashboards for grace hopper. We'd simply pass through the metadata around who this user is. The two dashboards that they should have access to. And then any role level security clauses that we want to apply to those underlying data sets to make sure that grace only sees the data that should be relevant to her. Any clauses without a data set specified will apply to all the different data sets that make up these underlying dashboards. But if we are building our dashboards for multiple different data sets, we can very easily specify which data set these were a level security clauses should apply to. And then on the front of our application. What we'll get from that API call is a JSON web token in response provided is a valid call. And then we'll just want to reference the preset SDK. So we can do that via a simple script or mpm install. But this is where if we're embedding in something like a notion or a sales force, we just need to go into their application builders to be able to reference the preset SDK here. And that SDK will go as access to the embed dashboard function. And again, we're just going to reference some of those parameters from the embedded dashboard model where we get the dashboard ID, the domain that it's asking us for here. And then we'll be able to mount the resulting iframe. Any specific div or HTML element that can contain it. We'll want to pass forward a valid guest token and we'll have a couple options in terms of whether or not we want to show a title of the dashboard show chart controls, etc. So walking through a very simple demo of that. If we get this dashboard to a point where we're ready to embed in our application. And then we'll have our homepage here where for this user. We're only going to give them access to one airports data and for one airline. But we're going to build this off the same dashboard that we have in the preset with all those different options. So if we only want our customers to be able to see data coming from JFK airport for Delta Airlines. We're going to take an API call here for that guest token. And the dashboard that gets rendered in our application is just specific to that data. So while we can make filters available that have the same rich functionality and cross filtering, etc. as well. Granted that we've limited what data they can see. So if we have a variable security clause, they'll only be interacting with the data that they have access to. And this can be made very dynamic with your application. So if I were to go in here and change my user settings and give them access to many different airports and airlines. And then we can go back to that dashboard. They can quickly be given access to more data by quickly re rendering that with new level security clauses applied. Or they could be given access to additional dashboards as well. So we have a few more best practices. We do find it helpful to safeguard these away in an isolated workspace. So for those unfamiliar with preset, we make the deployment of multiple superset instances very easy. So you can in one click deploy a new workspace. And where we commonly see this use is a separate workspace for an embedded dashboards were only those who should be able to edit the embedded dashboards and deal with the implementation will have access to them. And that way we can also limit with a specific service account. What data sets that workspace would have access to and what other dashboards and users might be in there. So you go look at some of the questions coming in now. There were a couple of recurring ones. One was, you know, is this possible in superset. And the answer basically yes, there are some nuances between what preset and superset offer that are different. So we'll probably circle back to that question at the end and kind of talk about the delta a little bit there. So somebody was asking if this is done in an iframe and the answer to that is basically yes, but you are targeting that iframe and the DOM and then using that guest token to provide the actual secured access. Are there any other ones in the Q and A that you'd want to cover now or should we hold those till the end. So in terms of embedding individual charts right now we do into embed entire dashboards. Now there's nothing stopping you from creating a chart of just one dashboard. Or sorry, a dashboard of just one chart. And then that obviously gives you the additional options of styling styling that chart at the dashboard level adding additional filters to it. But you would create essentially a one chart dashboard in reference that dashboard ID if you wanted to embed an individual chart. And then for more accurate pricing, you could always reach out to ourselves through that link that. I believe we dropped in the chat already if not we can. We did. So dropping your name in here we can reach out about more specific pricing. Since we are not naming users on the back end, it doesn't follow our standard licensing, but happens more in batches. So there is a small platform to be associated with your use case and then batches of users significantly below the standard money dollars a month. And there was one about modifying the width and height of the if frame after it's rendered in the application, do you know the ins and outs of that. There is a get scroll size function that is covered in some of our documentation here. And that allows you to basically remove the scroll bars and have it kind of auto size the if frame to the dashboards height, right. Yeah, so not sure. What is. Modify the width and height of the if frame. I think that's the most common request is to you know if somebody wants to stick a dashboard in there and not have scroll bars on the dashboard. That's the method you would use. But otherwise if you want to set it to a particular height that does scroll height or width, then you can just use CSS styling on the if frame itself, I believe. And we do have more questions coming in now. So you can customize the filters. As you can see actually in our embedded. I actually didn't even mean to target these, but we have targeted a little bit of the filters as well. So the filters can be styled with CSS. Additionally, for those of you writing latest version of superset or on preset. You'll notice that we can switch the orientation of the filters. So if we have, you know, top level navigation or application, we want the dashboard to have filters on the left hand side, we can support that. And vice versa, we want to move them to the top of the dashboard so they don't conflict with our apps navigation. That can be a comment as well. So you can always hide those filters. So you could have a dashboard with no filters in there. And cross filtering will work within the embedded dashboards as well. Somebody's asking about the size and aspect ratio of the dashboard itself, the dashboards are flexible and layout. They're not really responsive. They don't do. You can follow the follow-up system and slide what, street traffic signalCutrientでも. You have probably none of those runs with generic drive, bid, end, end, end, end, end, end, end of the ranch information that you're going to see in Business, doesn't know you vorbereave for JThe is eначality. So those do have a little overflow menu if they're in that horizontal mode like that. So you can see all of the filters no matter how many you have. And for those chart controls, those aren't meant to be turned off via the configuration options on the preset SDK. Those would be done via CSS. If we wanted to turn filters off, we would do that via CSS. Now I believe we recently took that out of the dashboard properties. The chart controls would enable you to turn on or off things like tabs, which we don't happen to have on this dashboard. The chart controls element of that enables the menu to be seen within your application. So I have two different versions of this dashboard within this picture's application. One with chart controls on and one with them off. If chart controls are enabled, it does allow the user to then export the raw data behind the charts in CSV Excel or an image. If those are turned off as it was with our individual view here, they wouldn't see those menu options. Then the other common option, which we have disabled here is turning off the title. Turning off the title will prevent everything in this title row here from showing within your application. Now they wouldn't see the share or edit options here, but they would see the ability to download the whole dashboard as an image or refresh it. But for stylistic purposes, we'll often be hiding the title. In terms of sharing the dashboard, the way embedded is working here is really meant for you to build in the workflow that makes sense for how you want to share these dashboards. So again, they won't see the share model when this dashboard is embedded. And then if you do want to enable it for Microsoft Teams, users, etc. Anywhere that we can reference the guest token in the preset SDK, we could be embedding these dashboards. Someone's asking about if it can be shared among Microsoft Teams users. If your application is shared among Microsoft Teams users, then effectively yes. You can build your host application on basically any platform, use whatever technology stack you want. And as long as it supports HTML, which presumably it does so that should be fine. If you're talking about intricacies of our back, then that's a whole different story. If you need to talk about security and synchronizing different user types and user accounts, that's a whole different discussion. But basically the application should work. There was a question about drilling. And at this point, drilling is not supported by embedded dashboards for a whole host of reasons. But getting into it gets into the intricacies of data security. So, you know, drilling operations allow you to kind of dive deeper into data. And as you can imagine, you might not want people to access more granular data in embedded use cases. So right now that doesn't work, but we're figuring out ways to support that in the future. Comparing this with sharing a dashboard. If you share a dashboard with preset or superset, the recipient basically gets the link to the dashboard and they would need to be granted access to that workspace. So they could just see it on your superset or preset instance. And with embedded, the embedded iframe uses a guest token and essentially anyone that hits that is kind of accessing the iframe embed as that user. So yeah, that essentially allows you to. To view it without having to have direct access to the superset instance. Let's see. If there were what do we want to cover a little bit of the difference between superset and preset in terms of embedding or do you want to do you have other stuff you want to cover first. This was all I had to cover for the moment. So certainly can dive into that. Okay. So I know a couple of the differences. One is that. If you're using it on superset, their superset does have an embedded SDK. I can dig up the link and posted in here unless you happen to have it handy well, but. With preset, you would actually use presets embedded SDK. So it's a different module ours is a little bit extended. So that it supports multiple workspaces. One of the. The features of using preset is that when you when you log in, you have the ability to create multiple workspaces and those are separate instances of superset. So you can use this feature on any or all of them. And then another difference there is that we have an extra layer of roll based access control that allows you to apply a set of permissions across those workspaces. So that that comes into play with presets version of embedded as well. There it is. So that's that's kind of the main delta is around the RBAC permissions and the fact that ours is built to work with multiple superset instances that we call workspaces. So we won't go too deep into superset implementation here is a lot of what would require some backend configuration on superset side. We've brought into some preset configurations as well as into the user interface here. So when we do things like generate a new API key, we can do that directly through the UI. And then that works with presets API, which goes one layer beyond the traditional superset API as we can enable, you know, different teams across different workspaces, different roles across different workspaces and even manage different dashboards and assets across those workspaces. So this is all covered under presets API documentation, which I'll also drop in the chat here along with the superset SDK that Evan just reference. But that's part of the reason we're talking a little bit more specifically about preset, at least on the implementation and authentication side is this will take this will make use of the preset API, which is going beyond superset there. There are a couple of questions that are actually about CSS. I'm going to drop a link in the chat to a prior blog post about customizing dashboards with CSS and there's also a similar meetup video that's on YouTube if anybody needs that link you can ask us in the Slack channels. But one of them is about legends, which I assume you mean on the charts and the answer is yes or no, depending on the plugin you're talking about, but somebody's talking about disabling the filters, VS CSS, and you can do that. So that use cases actually covered by that article, so check that out. So if anybody else is talking about customizing the loading logo and that's not something you can configure on preset yet you actually currently have to modify the code of superset to do that. So that is not supported, but if you want to do that on an open source instance of superset, join the customizing superset channel on Slack and we'll get into that. Can embedding be done only in an iframe or can it be done in a div? To my knowledge, it's all iframe based for the moment. That's pretty much the long and short of it. Well, render an iframe in terms of what you would target. We were typically targeted to rather than target an iframe itself. Right, but it's not yeah, it is going to place an iframe into the DOM of the host application. It's not going to like populate a div with the whole myriad of HTML elements. Yeah, exactly. Sometimes we have people talking in an iframe within here. In terms of the handlebars charts. Yes, that would work any chart that's rendering should render the exact same in the embedded functionality. Getting a bunch of questions that are not necessarily related to embedding. So we might skip past some of those, but if folks want to get all of those questions answered and we don't have time to do it today, then by all means. If you reach out to will, if you want to talk about presets specifically, or if you want to talk about open source supersets specifically, then join us on that Slack link, which I can paste one more time for anyone to join late. And we can take it up in the appropriate channel there. And then for some of the questions down at the bottom right now. Yes, you can programmatically allow a dashboard to be embedded that can be done via the API under dashboards here. And then as they can programmatically apply the rollable security both for preset team members using the preset API. That is commonly integrated with our SO providers as well, particularly for role based access control. But obviously when we go to create any new guest token, we have that ability to programmatically put in whatever role level security they should be. So we have access to a bad point. So similar to the way that we are doing this dynamically on the fly here to give only limited access. We could build in programmatic ways of deploying these embedded dashboards in a variety of different use cases. And so this one, but somebody asking if the guest token is specific to an access role or per embedded instance of the chart. And I believe it's the former that the guest token represents a user and their court their roles accordingly. So you could use that user that role and that guest token to support multiple dashboards and multiple embedded instances. And we could ultimately use that guest token across potentially different applications that would get a little more complex there as diving into kind of the backend here for those interest and how the sausage gets made. All API requests with the preset API will need a bearer token accompany them that expires every three hours. The guest token does expire every five minutes, but that preset SDK is keeping that refreshed for the browser session. So as long as that session's open, we don't need to be constantly making a new API call. But if we were going to be reloading or we're going to be reusing that token across different applications, we likely would want to create a different guest token specific to that application just to make sure that's being refreshed accurately. So you know, refreshing somebody was asking if auto refreshing the embedded dashboard is also possible and there's a couple of ways you might approach that the superset dashboard itself does have the ability to have auto refresh set on the charts. So you can do that on the superset side, but you can also in your host application do that as well, like if you wanted to do a set interval and just refresh your via JavaScript, your embedded iframe is often as you want, you can do that too. You might you might see more blinky stuff happening with that page reloading if you go that route also maybe that's worth mentioning the caveat that these tokens and access do expire so you can grab a new guest token effectively as often as you want you could do that per request if you wanted to go crazy, but you know, you get there's kind of a happy medium and there's somewhere ultimately you don't want people to run into access problems, but so refresh often, but maybe not the two. I don't know if you have sensible limitations in mind on that will or best practices. No, with embedded if I set up this dashboard to auto refresh every minute here when I load the i frame in the embedded fashion it's not going to be automatically refreshing as we would see in preset, but as Evan mentioned, if I were to reload this page or to set any reloading on the page if I wanted to refresh it would be pulling that way. It would be pulling out latest data based off the dashboard settings. Clarifying something about responsiveness, somebody says is the dashboard not responsive are the charts responsive, the answer to both of those is just to clarify again is that if I'm not sure exactly what use case you're going for here they said they want to embed two to three charts on the customer page. If you want this to work on mobile and that's why you're worried about responsiveness, then you might want to just set up your dashboard so that they're kind of laid out vertically to support that and then a full dashboard they will take that full width and when you go narrow they will squeeze down and just have one chart per row what it doesn't do is take say three charts in one row and then wrap them downward like so many mobile layouts do at least it doesn't do that yet. So it's really wanted to make sure that I give the best mobile experience you could always create a separate dashboard here in the meantime that is just one column of different charts and then depending on the logic you want to build into your application you obviously could render different versions of the dashboard if you know that person is coming from a mobile device. Somebody's asking about passing parameters through the iFrame to filter results. There are a lot of different use cases they're asking about doing it for specific user logged into the apps so maybe they see their data or some subset of the data that they might care about. Do you have specifics on that I know it's I know it's possible. I don't know the intricacies of it. Yeah, I mean you could you can continue to use ginger templating within real level security. Now it's not going to be pulling in things like URL parameters from outside of the iFrame there. So there are just some limitations in terms of how you want to reference that and going back to those initial slides there the more we can bring this into a thoughtful approach to how we want to structure the data sets over how we're building. These dashboards are going to make it much easier than to integrate with any application. Regardless of if we're going to pull that from a user data table or an alternative parameter. Because that will make it much easier if we do want to reference a URL or anything that we're going to grab a parameter from to ultimately implement into the role of a security clause. The more we can get that down to a simple and open ttional data set side, the easier it's going to be to do more dynamic things on the front on later on. And someone is asking about if it's possible to share a list of prives for doing things like restricting menu access or could they get a list of all the privileges. Both the superset documentation and the preset documentation of a pretty good coverage of this. In fact, the superset documentation recently had a giant table added to it of all of those that are back granular permissions. It may or may not be exactly current, but it'll be a heck of a starting point. If there are any things you specifically want to know about, maybe join that meetup dash embedded channel on Slack and we can kind of help you out on that. Yeah. There's a question about SSO. I don't know if you know the particulars of all of our SSO support of preset. But they're asking if it works with external off like open ID key cloak, etc. We can work with any SSO provider that supports Samo and skim. Samo for sign on and then skim for user provisioning. And we are looking to expand that, but our most common implementations there are going to be with octin active directory. But no reason we can't work with other providers provided they can work with Samo and skim. And in terms of again presets is going to, you know, complete configured with user roles. In terms of the access that the embedded user would have they essentially be treated as a dashboard viewer role. So for those that are familiar with the preset users or preset user roles. They would just have restricted read access only. So again, that's part of the reason that they don't have things like drill by access today where they would potentially be able to see. Additional data dimensions that they're not necessarily supposed to have access to. In terms of a sample embed. I will drop this link in the chat. This is a more experimental thing that we've come up with recently so that our customers can try out embedded themselves. Now this is designed not to store your token name or secret from any preset API token created. Obviously, this should be done without sensitive data just to make sure that as we're copying and pasting these we aren't giving any access to more sensitive data. But if you do want to test out embedded with some nonsense abuse cases, we do have this site set up once we can drop in those parameters and see it embedded within a web page here and how that might look. This also has some simple examples of the documentation we've blocked through here today as well some code snippets and I on you can play around with for a starting point. So we're not going to be able to get to them all so I'm going to take one more moment to endorse the Slack channel. We definitely will not have time to cover these but here again is the link to the superset Slack workspace which everybody is free to join. And the two channel names one is meetup dash embedded which you can ask questions specifically about this topic here today. And then there's a general embedded channel that is ongoing for more open source focused questions where you can get a community answer more likely than not. So I know we are running up on time here and looking through a bunch of the questions in terms of you know doing things more dynamically with the API. A lot of these are kind of yes but because ultimately there's so much that you want to do all via API versus what you want to do in the UI particularly for. Making sure that things look correctly for the embedded use case. Because with the preset API documentation you can see that you have the ability to. So I think I think I did a dashboard all the way through all of its relevant metadata. But ultimately if we're going to be rendering is an embedded fashion we'd certainly want to at least make our template a dashboard to the UI first to make sure we had to look and feel as desired. So there are lots of powerful use cases we can do with the API in terms of if we'd want to create different versions of that dashboard and dynamically fetch those rather than using a real level security. If we want to dynamically change things with the dashboard those are going to be more advanced use cases that certainly we can discuss about accommodating. But again the more we can keep things simple particularly for our initial embedded use case the easier it is for the implementation side and the less room for error we'd offer it we'd obviously find that. So I was asking about creating a dashboard where certain charts are visible to certain user roles and not others correct me a fine mistake and well but I think typically the way we would approach this is more the data access level. So you can restrict data access to particular user roles and then the charts will respect that it doesn't really hide and show the chart so the layout of the dashboard changes or anything fancy like that. But if if a charts data is reduced to the point that there is no data to display by nature of these roles then it'll just say there's nothing to show here and kind of show you an empty chart. Yeah, so if I didn't have access to the underlying data set that powered this chart it would be an empty chart and it would be. An empty block within the embedded dashboard. So we know that for a lot of our users we are going to be not showing data from that specific data set that's where we might want to break into two different dashboards and render one for each user. The same role of security might apply but those with broader data data set access would then get you know bad better experience in those with less data set access wouldn't see the empty dash or empty charts on the dashboard. There are a few questions about pricing here that have kind of a different nuances to them but I think unless you want to dive into the pricing model and how this works the the answer here is follow that link that we pasted earlier I can dig it up and paste it again in a second. Reach out to Will and he'll give you the all the pertinent details but there are people asking about all sorts of different use cases here so it may vary a little bit but we do support small companies which was one of the questions. So you can actually start using preset on a free tier if you wanted to just try out superset on preset and then this feature of embedded is priced a little bit custom it's part of our enterprise plan so again talk to will he's got all the answers. And as I've mentioned it's best to follow that form and we can get more accurate price into you we do have everything from small companies that are not even necessary using preset on the internal BIs and really using it as an embedded solution for a small amount of customers all the way up to using this for thousands of different customers for both public facing and internal facing applications so happy to discuss your use case and what pricing fits in there. See somebody's saying that the future is not enabled in their superset application i'm not sure if you're a preset customer a superset user but you'd have to use the SDK and if you're a preset customer again talk to Will if you're using it on open source that just join the embedded channel and plenty of folks will steer you in the right direction with the open source SDK. And I saw some mention of on downloads there the downloads would follow at least with preset we default to 100,000 aggregator results that can be downloaded via csb or excel format for the individual charts and then for the whole dashboard i've disabled showing the title here. But if you wanted to show the title, they would also have the option to download the dashboard as an image that doesn't do a PDF today, but would give them a png file or a jpeg of that specific dashboard. Another question related to that somebody was asking about the max size of the csb download if you happen to be an open source user there is a feature flag to enable full csb downloads but that comes with the big fat red flag warning that you can turn that on and you can do it at your own risk, but that can cause some serious server lock up issues and browser issues as well, depending on the size and scale of your data. A couple of people have been asking throughout this if they're able to rewatch this later and share it with colleagues and so forth and the answer is yes, we will be sharing a link by email to everybody that registered and will also drop it in the content share on superset slack. When that's available probably later today or tomorrow, depending on how the window blows and how fast you to this. Is there a timeline available available for when drilling will be available for embedded dashboards there's not a timeline at the moment that i'm aware of I think the answer is until we find out find here a good proposal on how to make this secure enough to make everyone happy we're probably just probably just not going to enable it at the moment, but if others are interested in. We're also interested in proposing a way that this might work in an acceptable way through configuration and feature flags and things like that we're open to hearing it, especially in the open source community and. We can get preset people in that conversation too and you know we're happy to discuss it and try to find a way forward it is on our mind no doubt about that. In one question on the tabs and kind of doing those in the long user level restrictions. Well you don't do that in the guest token call you do have the ability on the front end there. To choose what configuration options would be specific to when you're embedding that dashboard. So on the front end when we're referencing the embed dashboard function we could very well make this dynamic to the specific user that's logged into application. In terms of if we want to enable things like the chart controls or showing the title or the tabs. And that's so much more than what we're doing this application where we click on the admin dashboard we're actually going to the same dashboard the only difference really is that we've enabled the chart configuration controls as well. So they can have access to download and see the underlying raw data. Sorry for the silence and just typing a few answers for quick one offs. So what people are asking about a lot of specific use cases things they want to do with embedded in their particular host application with their type of security and their sorts of charts and data and so forth. When you get into these specifics again I think Slack might be a more conducive place to discuss this if you're whether you're a preset customer or an open source user. Let's take it to Slack and we'll try to help you out. And again we want to walk through a simple implementation here, both as this is the most common use case we hear presenting customers data, but also the way that it will be easiest for you to implement. The advantage of particularly preset and superset obviously is the ability to deploy multiple instances so with preset that's very easy to do via the API. So we do have customers that do need to isolate their customers into entirely different instances of superset. And then they are pulling dashboards to embed into their application from multiple different instances that can all be supported via the preset API. But again, those are best left to a separate discussion as that will be a little more technical implementation than the standard use case we wanted to cover today. And I was asking about hiding tabs in the dashboard. I don't know if you mean all of them entirely that's just a question of dashboard authorship so you just don't use the tabs. But if you mean in some dynamic sense like depending on user or role, I don't think there is such a functionality at the moment. So you can do it on the front end to hide the tabs. It's one of our configuration options. So you can hide a tab as well that should be covered. So hide tab is one option. And that will hide any tabs you would have in the dashboard. This one doesn't have them anyway. So you could do that dynamically on the front end if you want to switch it user to user. Otherwise, to have in this point, we can create different dashboards and dynamically show those different dashboards as well. And so for the question coming in, you likely would need to create different dashboards as it's not meant to be that granular to just target what individual tabs should be shown or not shown. And then in terms of everything in the dashboard should embed into it. In terms of adding components like a checkbox or something that is coming from outside of preset. We might begin into some eye frame inception material where I don't want to promise that all these things would work, but anything coming through in markdown that you'd want to reference in your dashboards just for simple text purposes. Obviously that will pass through as well. And there's a lot of kind of RLS based questions. That's the same sort of thing where you might want to take your particular question to slack so we can kind of make sure we're answering you correctly whenever security comes up. We want to make sure we're giving you the right answer. It gets a little nuanced. And somebody was asking how is the guest token generated. If you want to re ask that question with any particular details you're looking for there that might be helpful. Otherwise, I don't know well if you want to kind of extrapolate on that a little bit. We'll be going a bit beyond my knowledge in terms of the further sausage making, but in short, we're just making an API called to the guest token endpoint. And we'll get a JSON web token in response that is just getting access to rendering those specific dashboards and with those specific relevant security parameters. So when the preset SDK looks for that guest token. It's essentially going to pass through that as a dashboard viewer with that were a little security applied to all the queries that it's going to use to render that dashboard. And we do get an interesting question that has come up recently in terms of hyperlicking hyperlinks would work within the embedded application. Or yeah. So if I had a link for instance in the table here, it would render the link and allow me to link to other resources. Now, it wouldn't dynamically, if we were using this to link to another dashboard. It wouldn't dynamically render that link within the iFrame is the only thing to consider. So we would just need to build a code as a workflow if we are going to link to another dashboard or preset resource in terms of how you want that to render into your application by going to an alternative page. So if this was linking to an outside resource like a day name a Google search or anything like that. Yes, that would be able to render in the iFrame. So if you have any questions or a little bit too deep to answer here off the top of our heads without going into some follow up questions. Not sure if any others are jumping out as you as particularly answerable. So most recent ones that have come in. Yes, this will be available for offline viewing. We also have a very short video that we can share. I'll pull up actually that link shortly here that walks through kind of the very basics of this demo and a short three to five minute clip. So there was at one point in a history, another meetup that kind of also talked about embedded in a slightly different different light building a fat flask application as an example, things like that. So we can share that link as well on Slack and you know stick it in the YouTube description for this video when when that gets uploaded. And I just dropped moving to this short video, which is really a demo walking through just implementing the real level security and the demo we walked through today. And then also within the chat here you do have our embedded demo application where you can play around with us with any presets specific dashboards you want to play around with embedding. So that is possible to create charts that users can customize on their own dashboard, depending on the role. That would be something better done in superset there's not really a chart. So you can also authoring and editing experience and the embedded offerings, those are more for consumption than creation and modification. So if you want your users to be fiddling with charts using the chart builder tool formally known as explore, then you would want to just give them an account on superset and let them kind of self serve on that. It is certainly something we're exploring is bringing more functionality just beyond the dashboard viewers and interactions into embedded functionalities in the future. But in terms of how we support that today, you'd want to create a login flow from your application where they could get then go into your preset workspace and have further access. And again, the preset API makes that easy to configure the user on the fly if they're not already user within preset. Okay, well, we're about out of time and I think we're about out of the most easily answerable questions. So again, if your question was not answered and there are many of you that that applies to then please do reach out to Will specifically with questions regarding preset and presets offering of embedded. And if you have questions about just the general embedding techniques or features that apply to both preset and superset, please reach out on the meetup dash and bed channel on superset slack and we can just reask these questions and we'll do our best to answer them there when we have a little more time to follow up. So thank you Will for giving us this demo and answering all those questions. It's very much appreciated and thank you everybody else for joining. We'll follow up and we'll see you again soon. Thanks all.