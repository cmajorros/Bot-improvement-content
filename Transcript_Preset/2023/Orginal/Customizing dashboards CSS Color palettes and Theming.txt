 So welcome. We're here to talk today about customizing dashboards and superset and in preset, which is basically assess post diversion of superset. And we're going to talk about a few different ways we can go about this. First, I'll introduce myself very quickly. I'm a developer advocate with preset. And I'm also a PMC member for the Apache superset project. And I just want to, you know, shout out here that I'm doing this solo today. So, you know, join Slack if you haven't already. There's the link. It's pretty easy to type in. And then, you know, hit us up on the customizing superset channel pardon the typo there should be a tea there. And email me if I don't get to any of your questions today. But we'll try to cover a lot of ground pretty quickly and breeze through some things. And what we are going to cover today is a few different aspects of how you can theme your superset dashboards and indeed superset itself to some degree. We're going to cover dashboards CSS, which has dashboards and allow you to add a custom layer of CSS styling to them. So we'll show you how that works. We've got track color palettes, which you can customize for a whole different host of reasons. And then there's theming, which is a whole project that's kind of work and progress and we'll go into the state of affairs with that for sure you the ropes and then we'll leave time for Q and a as well for each of these sections actually. So phase one of our little three part act is customizing dashboards and CSS. There's a blog post, which you can get to here. I can't select text for some reason when I'm in presentation vote, but grab a screenshot and check it out later or hit the QR code. And there's a lot more detail on that page and I'll have time to demo here today. So please check that out and read up. So we'll get into the general topics that we're going to cover. We'll get into a couple of examples and I'll do them live and I'll try to keep an eye on the questions as we go through this. So fire them off if you have any questions or if I skip a step while we do this. Just to show you where you add this custom CSS that's pretty essential. So you've got a couple of options. One is this CSS editor or CSS template, we were you've got a crud view basically and you can add a custom CSS template call it whatever you want and then you know add some CSS here. It should work. Ever to go in here as you see we'll get to that in a moment. You can also add these templates in the code base itself on preset. We have the ones from the code base stripped out actually, but you can add and enhance those in the actual Python code base if you want to. But most people just tend to do it through here. Then if you want to actually use those in your dashboard, you go to edit dashboard edit properties and sorry. We'll get to that later. Edit CSS is the one I meant to hit and this is your live CSS editor and it really does. Let me see stuff live. Which is pretty cool. It's also got a couple of other new features. It's got some degree of auto complete and actually if you do certain things like important kind of feels that and for you it's got some syntax checking and highlights some errors and things like that. It's pretty cool. So let's go ahead and get into a little bit of what you'd want to do with this. There are in the examples I'm about to show you a few different techniques you'll tend to use one is that supersets full of these data test attributes. We use those for our end to end testing. But since CSS allows you to select data attributes or really any attribute on an HTML tag. You can leverage these as well for your styling purposes. They're very handy. Also, there's this specific one that comes up all the time. People always want to target one chart or another in a dashboard. So there's a little attribute that's the dashboard chart ID and this is static. And we'll see that in a minute. And there's also this end the type selector which is just a general CSS thing, but it's super useful if you want to get something in the third row of a dashboard or the third column of the certain row. And there's a million and one CSS tricks you can use supports everything. So if you want to like brush up on your CSS techniques, there's a bunch of resources. There's like the CSS tricks website and podcasts. There's the W3 school website MDM documentation. Can I use calm the list goes on. So we'll go ahead and go right into an example. So this is the kind of thing that people ask about a lot on Slack and get that and so forth. How can I customize some of these big number charts. Really, it could be any chart. This is since this is the most frequently requested. We'll just do it. So here, we've got a very simple version of that dashboard open just some very basic big number charts. And I'm going to go ahead and start honestly copy pasting a few things in this is this example is on the blog. If you want to dissect it, but that would be good to do one from there. So the first thing I want to do is actually import a different font. Then hopefully you'll be able to see that font change in a minute. But that just imports the font. Then we can do some very basic formatting of the charts themselves. And I'm going to add this little background here with a little gradient change the border radius a little bit. You can really do whatever you want. This is just to kind of prove the point. And this is where things get a little interesting. Here, I'm going to go ahead and copy and pasting from Google slides means you get a lot of language that shouldn't really be a problem. Hopefully. And then I'm going to add this little pseudo element, which you can tag on to any given HTML tag and it sticks in the bottom as the makes the circular. And various other little styling attributes. And of course, what we want to do there is stick flag of these various regions into those tips. And then I'm going to go ahead and use that dashboard chart ID selector. And also you can use the attribute as well to target these. Now, as you can see when I paste that in the flag doesn't show up. It doesn't work. That's because a copy to pasted this from a different instance of superset. And actually, I'm going to go ahead and do a little spin on king here and go in and save this first off. I'm going to go ahead and know truth detail. The future got in the way that I'm going to find those IDs. I'm going to go ahead and do a little spin on the flag. I'm going to go ahead and do a little spin on the flag. I'm going to do different spots. Let's see, it got 79 81 cool. So I'll go ahead and edit again. There it is. It's working. So once those actually work, it shouldn't be a big deal to worry about that. That that number should stay the same. Okay, then last one, this last chart here, we want to go ahead and stick in the background, which is another. I'm not going into too much of the CSS obviously. There we go. I'm going to go ahead and stick the background in there and then I want to add and use that font from Google and give it a text shadow because why not. And there you have it. Except. Then also the background wise that. Oh, there it is. Then then some things look a little goofy and pretty low. And then you can see that it's kind of transparent, but when you actually view the dashes, really, I think. So that's one example. So for this, I mean, they're kind of arbitrary things I'm doing, but a lot of people might want to add a layer to the background here that might sit behind a certain type of graph that indicates safe zones and danger zones or something like that. Or you might be showing customer data here and want to stick their logo in the corner. And then you can see that this is just kind of showing you access particular charts. So then I'll go ahead and do one more example. This is another thing people have asked about that wasn't covered in the blog where you might have a couple of charts that are conceptually connected. So you want to actually, you know, physically connect them. So here we're going to remove the gap between the two charts. We're going to straighten out the corners. We're going to remove the title from this. And then we'll remove this little overflow menu or not, you know, delish choice, but maybe I'll show you both. So here, let's go ahead and edit this sample dashboard again. If I go in here, then this is where we start to use some of those of type CSS selectors. I'm going to go ahead and base the whole thing in here. And then we'll go ahead and do the same thing. So in the dashboard, there's all these drag dropable rows and drag dropable columns. So those are the kind of X and Y coordinates you want to use to target certain charts. And this is grabbing the first one and adding or changing the margin from, I think, 16 pixels down to zero. So we've got to use this important thing here because there's a really long CSS selector that you want to override. And isn't going to tell you later, these important tags are kind of dangerous. You want to use them sometimes if, if you've got some crazy selector or the load order of the CSS files is somewhere where it's difficult to override a style, but you want to try to minimize use of those because you're getting fancy with things and guarantee you will trip up and start to having to put importance to cover your own importance and you kind of start to run out of the nuclear option CSS selectors. So, as you can see, this isn't really applying in our preview. And that's because there's a couple of elements in the dashboard that don't exist when you're rendering it just as a viewer. So all I'm doing here really is removing that padding, changing the border radius on these bottom corners and on these top corners and then sticking together and got two bits of stuff here, one to remove just the title and one that removes the whole bar, including that overflow maintenance. So hopefully this will work, work yesterday and there it is. So, right all that stuff is happening and there connected the caveat. If you do weird things like removing bits of you like I just did you can't edit that chart anymore from the dashboard. So, you know, do this stuff at your own risk. All right. So I think I covered a couple of these gotchas but some other ones that are important to note is that the DOM or the document object model the structure of the web pages HTML is not a contract. If you start using the CSS templates, you're probably pretty safe for a while, but as we refactor code change react modules component libraries, all that kind of stuff, the HTML and the classes that are used by our subject to change. And that's not something that we as a percent considered to be a breaking change in terms of, you know, release management. So this stuff could change underneath you. And if you start setting up really complicated templates, you're going to have to maintain them and you're on your own at that. And then not everything can be styled somebody asked the other day about how to do a radar chart or the the outer numbers and graphics were basically a little light they were kind of local interest and I agree. But unfortunately, since that's it's actually a canvas element you can't really target that with CSS. So in that case, you'd have to go and make a change to the code, which we'll get to the main later, but there's there's a bright future for that. I already talked about important a little bit and then very important use comments. I've gone back and tried to maintain some of my own templates and it gets really painful if you don't leave notes for yourself about why you have something there. And then if you want to contribute to this effort and make things even cooler, there's a bunch of stuff we can do. Like I mentioned for hitting specific charts, there's that chart ID number thing, we can add more classes like that data attributes and things like that, they make testing easier than exciting easier, so please open a PR it's cool. It doesn't support SAS or anything like that as CSS whatever you want to call it, that would be a really neat add on. The templates that are built in to superset are aging and not terribly well at that. So if anybody wants to add new ones or improve the existing ones that would be really cool. And then of course, ping me on Slack and you can ask and answer questions about all the CSS stuff or you can ask for more examples that weren't covered in that blog and I'm happy to keep doing little ninja edits to that thing and grow it over time. So okay, regarding that blog, there's lots of other examples there that we didn't cover here, we're moving right along two more things to cover. But yeah, hit me up with more requests and that would so are there any questions about CSS stuff before we move on to the next chapter, it's kind of interesting. Now I find able. Oh, there's a whole bunch. Okay, the code is available on the blog. I will share the link on Slack and. And then look it up on the freezer website, it's very easy to find. We've got a couple of specific requests of how to do things, I'll cover those later if I'm able. Yeah, somebody asked if it's the concatenation of charts is the same as kind of putting them in a call and they out and change the background color. Yes, and I guess that's kind of the story of CSS is there's always multiple ways to tackle something. So there's always just many, many techniques to kind of do what you're after this time. So I was just showing. Contact me on Slack linked in this pool, but Slack is where I spend my day. And then there's a question about fetching data and currencies and so forth currencies or another level level of customization that's been coming up a lot and I hope we can actually do another blog post about how exactly to do that. Because there's a lot of currencies in the world and you probably don't want a super long list of every world currency in your superset select menu. So yeah, there's a little other that's a whole other topic. But moving right along to chapter two, I'm doing a time. Okay, that was probably the long chapter I'll speed up. Customizing chart colors. So superset also supports theme colors that you can use to color your visualizations. There's another blog that goes deep on this. So, you know, take a screenshot of you want to get this URL or use the QR code. I can also paste the link on Slack or you can find it on the preset blog. But there's a couple of spots you find these one is in the dashboard properties editor, which if you're in edit mode. So you go to properties and you've got this lovely color spin selector here. And then the other is in the chart itself, whoops. So within the chart controls, you have the ability to pick a color palette for your specific chart. Now, there's a couple of types of color palettes that we support. It's sequential, where it's essentially a gradient or color range. So there's all sorts of reasons you might want to do that couple will talk about it. Cold to hot or rag red and green kind of statuses, things like that. And then there's categorical color palettes as well, where it kind of round robin the signs of color to all of your different series and your data. And support both of those and customizing both of those. There's also a topic that we need to go into about color consistency. This is a whole body of work where that was done to make it so that if you use color for a series that applies to all of the charts. It's able to in a dashboard automatically. A lot of people used to do this custom and Jason, which I'll show you in a few minutes to manually assign a color to a series. But now it tries to apply that very consistently. And if you go and edit a chart from a dashboard, it pops it open and it carries that color palette into the chart builder experience. The original chart remains untouched. If you need to get to that, you would just go to the chart list and go to it very directly. But if you access it from a dashboard. The color palette comes along. So you have that kind of consistency and understanding and editing the chart. You go back and forth and those sorts of work goes. And this is actually, it sounds simple, but it's a super complicated feature in the way this works. And certain glitches do apply where if you edit a chart and go back to the dashboard, you might see identical colors next to each other or something like that. If you ever get stucker in some weird state, you can remove the color palette from the dashboard and reapply it and that kind of resets the algorithm to reapply that color scheme. So that's. And then it happens and we're we're going to try and smooth that stuff out. And if you want to get into creating custom label colors, you can do that in the dashboard metadata. And when you do so, it actually warns you on the dashboard color palette bigger that that's the case. And I'm going to go ahead and show you how to do that. And there's, let's do that. So if I go to something like this and go to edit dashboard and you can edit properties pop up in the advanced tab and somewhere down in here, there it is. Label colors. So since this is airline stuff, I happen to have a little snippet here of all these airline codes. WN Southwest f9 is frontier American airlines and forget what the other ones are united. I looked up their brand colors and added those as hex values. By the way, this also supports RGB, HSA, whatever kind of CSS color you can do is all of that stuff. And then you fly that and save it. Then there you go, you've got your Southwest blue, you've got your American Airlines red. So you can do this with your, you know, customer local colors or product colors, whatever that they are. Then if you want to edit these palettes on open source, there's, that's basically something you do and code. If you go to the config.py file, there's a couple of sections, one for categorical, one for sequential. And then you disable this line, just comment it out and you can uncomment this block. In fact, maybe I'll just do that real quick. I think we have time. So I did this last night actually. This is the default line that I commented out and I added a couple of sequential color schemes here once red and green or the rag is this and some industries. Then there's the cold to hot one with the middle color of white so kind of diverges toward that in the center of that. And then I see I thought it had some other ranges here. Oh yeah, couple of categorical ones. And then there's the old Fisher price, Sila phone, something you probably grew up with. These are kind of randomly chosen, the Olympic green colors, why not. So now that those are in here, if I go to one of these charts, you should actually see them at the bottom of the list. Yeah, so there's my whole to hot palette. If this was data that was warning you about the status of something, the red colors like that. And then over here, we've got our fancy new stream graph support on our e charts, this plugin in case you haven't played with that. It's actually pretty rad. Yeah, something fun like that as a side note. And I'll go ahead and use the Fisher price, Sila phone colors. And there you go. There's a there's a rainbow mess. And maybe meaningful to somebody. But anyway, that's something you can play with. And if you want to do this on preset and you happen to be enterprise customer, then there's another way to do this. Which is that we have a color palette builder. So if you want to add a new palette, you simply go in here and click that and you can add some colors as many as you want for a categorical palette or for sequential palette. You can pick the outer extremes and then you can pick the option to add a middle color if you so choose. So I've got a couple of those prebuilt, probably saw on the blog post. This is a minty palette, which is a terrible idea for visualization because the colors and that distinct, but you can go in here and you know pick whatever you want. And then it actually displays them in this kind of example pseudo charts and you can see it in situ. When you do that, it shows up in your superset instance, your super sub works based on preset. And the same is true for kind of work, very for sorry. Gradient color palettes. So this one is using white as the middle colors, the same as that cold hot one I showed you a minute ago. Okay, so going back to the slides. There's the demo. And then I'll take any color palette questions for a moment or questions about the other kind of. Somebody's asking how to hide or show charts on superset you can do that with CSS if you want to target them specifically. But there's not too many other kind of dynamic ways of doing that. I'd be interested to hear the use cases of somebody as specific rhymes or reasons of why they might not to hide or show charts in the dash, but it's going to lead to some screw dashboard they also tell you how much. The best way to tag specific colors to a specific metric that was essentially what I was showing you with the the serious colors and the JSON editor. If that metric has a title, you should be able to and it's used in charts, you should be able to target it just by name, just the name and the color value you want to use in that JSON blog and it'll have. And it will override the dashboard color palette for you to sign to the dashboard. All right, that's the questions we have there for the moment, keep thinking a more than trying to leave time at the end here. And then the me super set. So this is the third part of our three ring styling circus here. This blog I was hoping to get out by today, but it didn't happen. But here's a sneak preview of what I'm going to be going to depth about. And this is probably going to be the most powerful and interesting part of styling super set in general, not just dashboards with the entire UI. So I want to disambiguate it from CSS because the CSS applies to dashboards, even though it can apply to like the global map and things like that outside the scope of the dashboard itself, it really only gets applied when you're viewing that dashboard paid. So, the meaning is applied to all of super set every page. And it's also different from color palettes that when you when you add colors and styles and things to a super set theme. The viz color palettes are still kind of their own entity that treats charts the way they do. But what it is is JavaScript styling attributes. So this is a big JSON object that holds all sorts of type values and color values and it gets reused by the JavaScript the react modules that are the front end is comprised of. So when you make these changes, they should be picked up by the react components down the tree and style, basically everything under the hood. It's using a library called emotion. There's a handful of links here. I can share this whole slide deck, by the way, if anybody's organizing a little links, I'm not copy pasting. It's CSS and JS. So it basically in your react components, it takes these values from the global theme object and applies them as needed to that particular component. And there's some documents on how to develop with that best practices, the rationale of why we're using it. And of course you can check out the library. So that theme exists in superset UI, which is one of our many NPM modules that supersets built out of superset as a mono repo. There's a bunch of packages and they're including all those disciplines. And from there, it's it's important and picked up by all of these libraries. And that was going to put the code example there, but I didn't sorry about that. What the theme is built out of is basically this at the moment. And this is going to be expanded on, but you have things like your border radius. There's little rounded corners all over the place. If you wanted to make that it pixels sort of things, bubbly or cool. You've got your primary color that's used for things like buttons and grayscale is used in all sorts of different surfaces of the UI, then of course you get your semantic error warning alert success info colors. A lot of things are transparent and superset for various reasons. So all the capacity stops are here. And you've got the very basics of typographic style here. We've got the fonts we're using for different purposes, if you wait some sizes. So if you want to have giant headers that are applied everywhere, you can you can change that. And well, you can, but it's it's not perfect. We'll get into this the ups and downs of this in a minute, but the There is there's a couple of ways to tweak this one is by going into that code. I was just showing you in superset UI and if you deploy your own instance of superset, you can do that and just change what's there, no problem. Also in config dot p y as a fairly recently is there's this theme overrides bit that does emerge of what you type here on top of that existing theme using low dash, which is like the coolest library ever. And so you can override single values and do things like your brand colors. Can you use it today. It's risky. It's early. You probably shouldn't, but you can toy around with it and you can do certain things. So I'm going to show you a little bit of that. And let me try to switch more effectively to be as code to do this. But we'll talk about the readiness. I'm going to I'm going to show you kind of where this where this is at very visually. And what's what the limitations of it are, but there's a superset improvement proposal or a sift that's out right now that explains a lot of those shortcomings in depth. And what efforts remain to get it working properly and systemically, throughout the entire UI, which is definitely a huge goal because everybody's always saying where is dark mode. And this represents the effort that's needed to pull that off properly. And the big chunks of that effort are getting everything into reactor still using flask at builder under the hood that does Python generated static server pages and once we get rid of those and turning it into a proper react front end application. Then we can get rid of all of these less files that are essentially CSS. And we need to bump the ant design library that is our fundamental component system because now that's much more themeable than it used to be when we first implemented it. And we need to apply the superset thing that I just showed you all of those values need to map directly to each arts are primary visualization library supports payments and not our colors to their colors and do the same thing with Andy once that's upgraded. And we also need to add part of the sip if you want to read it is that we want to get into some more kind of semantic style definitions for, you know, background surfaces foreground surfaces. And get into different sorts of type families. So there might be like a monospace or code font definition where you can change the size and color and everything that particular type of font treatment. And then basically it's just going to be coming through the repo and setting up a bunch of lending rules and stuff like that to make sure that we don't have any hard coded values and we're using these attributes all over the place. So it's a big body of work. If anybody feels like getting involved in this effort just hit me up or join the customizing superset channel or the improving superset channel and we can talk about all the Maria tests. So let me change over to the code for a second and I'll show you what I did as a little goofy example. So if I uncomment all of this theme override stuff, which is not the actual comments string. And I turn this off. Actually, you know what I'll give you two and one here. Let me comment this out. So what you might be able to do today is use the primary color, which is buttons and things like that. You can change primary and secondary to red and green in this example. And the grayscale main color this used in a lot of places is turned orange here just for proof of concept. This is exactly what you'll see in the code. And if you do that and then reload a page like this one. You'll see it when you use and it's not pretty, but it means you can use your brand color for buttons and things like that. So this should be. So did I forget to. Yep, I got to comment that part out. Let's try that again. There we go. Okay, so now you can see that what's supposed to be grayscale the base color of grayscale is orange. So we changed the corner radius of a lot of things and what used to be kind of like green blue buttons now red by default, it can change the other states to of course. So it ain't pretty, but it illustrates the point. And then if you want to go extra crazy, what I did in won't show is I took the grayscale color range from the default theme and inverted it. Everybody wants to know about that dark mode. So here's a very ugly version of dark mode. And if I load that nine scenes and refresh. I think super set a second to. She want that. So here we go. Okay, there you go. sneak preview of coming attractions one day this will work. But as you can see, not everything is affected by a thing yet. So we have a bunch of ant design components like the global navigation here, some of these inputs and things like that that aren't thoroughly using those. And this is also. You know, one of many charts and superset that are going to need styling treatment as well, the charts ones can all be done in one fell swoop, which is going to save a heck of a lot of time, but the legacy ones are going to be a bit of a long tail effort. So I'm going to click around and see that this is true and most things like list views are not great. This text should be like super light, instead of super dark. But once we theme and design, which is the components that you're largely seeing, I'm deemed here and get those each arts, then I think it's actually going to be a pretty usable beta state. So I'm very excited about that frontier. There's more to do, but it's it's getting there. So with that, I'll actually bring on the data that's pumpkin slide and see if anybody has any additional questions about theming or CSS or color palettes or any of that stuff. Somebody's asking if there's any boiler plate CSS to start off with the closest options you've got there are the example templates that are built into the code base or going to that blog that I wrote that has a bunch of stuff in there. There's even a really terrible dark mode CSS template that hits a lot of common areas to kind of give you some useful selectors to riff on. And then, if you want to ask if there will be a drag and drop interface to edit color palettes, there is on preset. I guess not drag and drop per say, but. Oh, well, I guess I'm referring to chart creation, if you mean applying chart, color colors to charts, that is not yet the drag drop experience, that's a certain certainly an interesting idea. And then we use custom CSS properties as values using CSS variables and so forth, if that's what you mean, that's not really greatly supported, although the ant design library and it's steaming up, I believe, is going to use CSS variables, so there might be a little bit of a base to tack on there. We haven't done that anti upgrade yet, once we do the upgrade will find which of the various approaches works best for that and variable variables might be part of the puzzle. Okay, somebody's sharing a French design system that they'd like to start implementing and that's great. There's a lot of different design systems that come into play when we're talking about things like gaming. The concepts that are laid out in the sit shout out to Michael Molina for writing that are largely based on material design, which is kind of the household name and design and gaming systems. So they've got some good concepts we're going to rip off. Then somebody's asking can we add custom Andy react components. Yeah, I mean at the end of the day, this is open source, all of this stuff is very game to play with PRs are welcome. So if you feel like there are components that are not being used or not being available that you'd like to implement and superset biomines add them. The thing we usually do is kind of add a little thin layer to those ant decomponents so we can kind of limit or set a few of the props by default add a little bit of baseline styling to those components. So we'll kind of use a superset global component that uses this ant being under the hood. The reason we do that. Partly for just keeping the clean, but also so that one day if we ever need to move away from ant for some reason, then we just need to update our base superset components. So that's the new library will be easier than the current migration around the going. Does not see any other questions. Oh wait. So we've got a whole set of react components. Compliant with their design system. What I recommend replacing the react components for styling the existing components. I would say style the existing ones. So I would say the same thing. I would say the same thing. I would say the same thing. That's the kind of improvement that would be with everybody. What you're Whoo. You're seeing as a shortcoming is probably a shortcoming to somebody else. So the more. More thematic. Hooks we have in our superset components. The better. And. And. And then we have the app here is welcome. We can have a whole other meet up around getting into the code of it if you want to. Someone asked what lift or work involved of spreading the theme through the code basis. I think it's those main things. It's applying the theme to the e charts theme. It's applying the theme to empty, which requires a major. Anti upgrade, which will probably break a few things. So we need to be very careful about that upgrade. When we need a similar experience to your site. Next, one. So it's happening piece by piece. And somebody's curious about customizing tool tips on map elements. Tool tips, that's an interesting question. I don't know the answer to that. There's probably, there's a will there's a way. But I don't know. I'll look into that. And I think that's it for the questions. So at that point, or at this point, I'll go ahead and say thank you all. And if you have more questions, again, please join Slack. Let me get you the link and just paste that in the chat really quick. That's important. You should all be on there. There you go. There's the slack. And then yeah, join us in customizing superset. Let me know what I didn't answer. Let me know what examples you want to see. Let me know if you want to contribute all that stuff we can keep from this better. So thank you all. See you next time.