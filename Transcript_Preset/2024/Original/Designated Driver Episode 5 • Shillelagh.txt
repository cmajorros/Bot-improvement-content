 To Latin, a pop top tech overpights, Evan and Beethoven, the minds bright but light, Apache Super Set, data flows like streams, Crearies and engines, all parts of their dreams, Disignates a driver, tech talking stouts, Irish tunes in the background, Cheers and all down. Hi everybody, welcome to our fifth episode of Designated Driver. Today you'll notice there's only two of us, which makes this a very special episode. We don't have a third party guest from a third party database. In fact, we have Beto Jameeda joining us, the author of Shalely, which everybody should know and love if they're Super Set users. So, yeah, Beto, you and I usually introduce yourselves. Is there any initial introductions you'd like to make about Shalely, or its name or anything like that to start? Yeah, I wrote Shalely 4%, which I think it's an interesting thing to talk about in this episode. It was developed for Super Set, and the name, if you're not familiar, it's an Irish word for like a stick club. And yeah, it's also a dangerous and dragons spell. I think it's a cantrip these days. So that's where I learned the word, Shalely. I played a lot of ninjas and dragons, and I knew the spell. So that's where it comes from. This is something we had in common, right? We were both druids back in our D&D days. Exactly. I mean, I'm steering my D&D days, but yeah. Oh, okay. I'm afraid to go back in that rabbit hole. So, did you bring a beer with you today? For sure. Well, since Shalely is an Irish word, I have with me again, is extra stout. Oh, the bottle, not the can fancy. Yeah. I had that. That wasn't a mood for a bottle, you know. It's different drinking from a bottle of coffee from a glass. It is. But yeah, and similarly going Irish, I have a Sullivan's brewing, I wrote Malting's Irish ale, which I guess is an Irish red ale. Nice. That's a beautiful can. Yeah. They did a nice job with the packaging. It actually has like a texture to it, which is kind of a trip. Interesting. Yeah, let's get into it. I guess I have to pour mine, because I brought the English glass, which might actually be a cardinal sin to the Irish beer. Yeah, I only have hard rock, cafe glasses at home to drink beer. Okay. So, well, sluncher. Well, sluncher. But yeah, it's good to be open to beer, because Shalely has like a long story with Super Set. Okay. Yeah. And it's Friday. And it's Friday afternoon. So, it's all very fitting. So, yeah, tell us the back story of Shalely. What were its initial origins? What was the aha moment there? Yeah. I mean, there's a reason why I chose like, she lady, you know, for the name, because it's a Druid spell and, and it's not just because I like Druids, but like, Super Set started as a web interface to the Druid database. Right. So, it started as a hackathon project at Airbnb. And Airbnb was using Druid and Max Buschemann. And he was, he was like, hey, it would be really nice, you know, if you could look at data from Druid. So, he built this web UI in like a week or a weekend. And, and in the beginning, Druid didn't support SQL. So, it was a very different product, because Super Set was, which was also not called Super Set. It was called Caraville. Penorimics. Penorimics. No, Penorimics was the first name. It had both, both names. I don't know the sequence of the two. I think Penorimics. Yeah. So, it was called Penorimics, because Penorimics, if you're not familiar with asterix in all the links, it's, it's all, he's also a Druid, right? So, if you read the comics, these are like French comics, Belgian. I think they're, yeah, I never read those. So, this is news to me. Yeah. So, Penorimics is a Druid. He's the one that makes the potions that asterix gets super strong. So, Max called the product Penorimics. And, since Druid didn't support, Druid the database didn't support SQL. Super Set was in like a Jason payload, you know. It was kind of, it was a rest interface. He would basically say, I want these metrics. I want these group eyes. I want these filters, just like SQL, but it was Jason. And, it started growing. It got renamed to Caraville, and then eventually got renamed to Super Set. And, at some point in that process, people were saying, hey, this is, this is a really cool product. I want to connect it to my SQL database. I want to connect it to Hive, or I don't know what was the first SQL database. So, then a concept of a connector was added. So, like, okay, we can talk to Druid, and we can talk to any SQL database, as long as you have a SQL Academy dialect. Right? So, SQL Academy is nice, because it offers this interface. To 50 different databases or more. And, for a long time, there was this two code paths. If you wanted to send through the query, you know, okay, we need to create Jason. We need to represent metrics as Jason. Let's send it down the wire. And, if you're querying a SQL database, then, okay, you define your metrics using SQL, and you send SQL down the wire. Right? And, it was hard to maintain that, you know, every feature we added, we need to support both cases. It was hard to maintain that, and we need to support both cases. It was very complicated. And then, when I started working in SuperSet in 2017, the first thing Max told me was, hey, can you add support for Druid, but with SQL? You know, we need to get rid of this, because it's super hard to maintain. Can you add support for SQL, so that we get rid of the old code path, and all we do is talk to SQL Academy. So, I was like, yeah, sure. And, I was like, okay, so I need to write like a middle layer that, you know, gets SQL from SuperSet, and then builds these JSON requests that Druid is expecting. So, I think I worked on it for a week before Max asked me, like, hey, how is it going? I was like, well, you know, this is not trivial. You know, I need to like, build the SQL parser, and then do like a translator to generate JSON. And then he said, what are you talking about? Like, Druid support SQL. And I was like, oh, I didn't know. So, it was, it was a new feature, you know, Druid, they used the CalSite library, they added support for SQL. So, there was an endpoint now that you could just send SQL, and it would work. So, my work was much easier, but the work I had started, I called it Chilayli, because I was, I was like, okay, I need to talk to Druid, you know, I need to get SQL and send it to Druid. So, I thought Chilayli was a good name, because you're kind of like, hitting the database to accept SQL, you know, you're like, you're like, you're like, you're like forcing SQL into something that doesn't take SQL. Waiting with the stick as one does with it. Exactly. Yeah. So, I thought Chilayli was a good name, because you're kind of like, hitting, hammering. I wouldn't say hammering, because it's not a hammer, but you're like, you know, forcing something. Um, it's like, okay, you don't take SQL, but let's, um, let's push SQL. So, so the work was much easier, because okay, Druid has a SQL interface. So, I kind of put Chilayli aside and, and I just did like a Python driver or SQL can be dialect, and it was much easier, because all you need to do is send, send SQL and then read the results back. So, it was much easier. I didn't have to do parsing. I didn't have to do transpilation, anything like that. But I put the project aside. I had the repo, and I always interested in having a library that can take SQL in January API calls. Right? I think, I was like, this is a powerful concept. If I, because SuperSetTalk SQL, you know, and every time you're like, okay, how can I query data from GitHub? How can I query data from Google Sheets? How can I query data, you know, from pandas? I don't know. Um, the answer is you can't, you know, you need to talk to something that no SQL. So, I wanted to do that, that library, to kind of open up, the possibilities that SuperSet had to connect to data sources, without having to change anything in SuperSet. Right? That's, that's the beauty. And then you largely accomplished that. I know, uh, from our prior discussions and stuff for building, which we can talk about a little bit, I guess. You know, it does connect to the API without feeling like an API. You could just say, get me these PRs, where they meet these conditions, things like that. And J. I was like, yeah, yeah, yeah. So, so I think the first big API was Google Sheets. I was looking at lift, a lot of people had dating Google Sheets, and they kept asking me like, hey, I want to create a chart, and I want to show my data that is in Google Sheets. How do I do that? And I would say, maybe, maybe, maybe, maybe, maybe, I want to do that. Yeah. Yeah. How do I do that? And I would say, don't do that, because Google Sheets is not a database. There's no guarantees. And you should really put your data through it or high, which is insane. Because people don't want to put their data in high or any database, normal people. And then at some point, I gave up. People were like, hey, how do I look at my Google Sheets data? And I said, you know what? I'm going to build Chilei. And I'm going to make it so it connects to Google Sheets. And then basically, you can query any URL of Google Sheet. And it should return data. It understands label. So if your first row is like country revenue, it will use that as a column name. So that was the first big one. But I suffer a little bit of that thing engineers have where I try to generalize maybe too much. So I was like, OK, I want to have a concept of an adapter, which is like what talks to APIs. And I try to hide all the complex cities. So it's really easy to write new adapters. So I was worried about my users. I wanted my users to have a good experience. But I was also thinking about other developers. And I was like, OK, if somebody wants to support a new API, I want it to be as simple as possible. So I abstracted all the complexity. And if you want to support a new API, you can add support in a few minutes. And it's probably going to be inefficient. And then you can iterate and make it more optimal. Download and request as little data as possible. So that takes more work. But then it's more efficient. So there's support for, so the third party support that other people added for like GraphQL. So there's a GraphQL adapter. So you can run CCO against your GraphQL endpoint. Air table is a big one. Google Sheets, I mentioned. There's a generic JSON adapter. So any API that returns JSON, you can fetch data. You can scrape HTML tables. You can read CSV files. You can read from S3. If you're reading from S3, it will even use the S3 select endpoint. So it will filter the data on their server side, right? Because a lot of the work you want to do is with the adapter, you can be very dumb and just fetch the data all the time. But you want to, like I said, you want to do as much processing as you can. You want to push that to the server. Right. And I guess it's kind of to that end. If you're using the XML adapter, you can use X-Path, right? And JSON, JSON, path on the JSON adapter and all of that. So you can kind of get a more curated version of what you need. Yeah. Yeah, very cool. And I guess, well, one question is, how often do you think people are using Google Sheets as a database? I know it's a Cardinal Synod to do so, but I was doing it. I'm guilty, which is how I started kind of falling head first into Shalei Lamp. But I think we were also talking about this with Jordan from MotherDuck that, you know, small data is the new thing, right? And businesses across the world just keep their stuff in spreadsheets for better or worse. Yeah. Well, I think like the perception of how often people do this and probably shouldn't. I mean, it's a lot, right? It's like people using Excel today is Google. Like in the past, it was like people using Excel for things they shouldn't. And now it's people using Google Sheets. But like, like I criticize Google Sheets, but it has super friendly UI. It's super easy to understand, you know, to get started, to add values, add it values, you know. You can make it look nice. So I think it has its purpose. And I think there's a lot of valuing these small data sets, right? There's like if you look at distribution of data sets by volume, it's a long tail. You have these huge data sets that aren't like, I don't even know these days, but like hexabytes of data. But then you have this long tail. And this applies to any domain, right? Like I come from an oceanography. I used to be a climate scientist. And that was my main concern when I worked with ocean data. I was like, there's all these measurements that were made, you know, like I'm from Brazil. So we had like a lab in Brazil that did the crews in 73. And they stored all the measurements in the paper spreadsheet. Or it's in the old heart disk or floppy disks, you know. And that's data that you can't go back in time and measure. Again, it's actual physical measure at a four-dimensional point, you know. It's like time and space. And it's really important that we preserve that, right? And that's just a few kilobytes of data. Like I remember going on a cruise for a month in 1997. 1997 we went on a cruise for a month, like a scientific cruise. And we came back with 600 kilobytes of data. That was what we collected in the month at the ocean. That's crazy. Yeah, it's like a floppy disk. So I think there's a lot of value in making it easy for people to, you know, translate that data into a Google sheet and then have it being accessible. Yeah. Well, speaking of data, need some beer data. How's the Guinness? It's good. This is a great beer. Do you think the bottle's better than the can? I think it's very different. I was actually like, I was at the Supermarket. And at the only Irish beer they had was Guinness and a can and Guinness and a bottle. And like, to me they're very different. I know the bottle is more like, I don't know, homey. It's like cozy. It feels like, and the can is, you know, you put up four in a glass if it was like more social, more. One is an introvert. There's an extra for it. I would say. That makes sense. There is one. There's another variant of the Guinness bottle that's the foreign extras style. It's like, it's a weird style of style, but it's typically from the drop four rain for an extra. Yeah. I don't know if you can buy it here in the States, but they sell it in Ireland. But how is it foring then? They sell it in Ireland. Because they don't make it in Ireland. Because from I forget where I'd have to look it up, but somewhere more equatorial. Oh, interesting. Both the style and I think the origin of that beer are equatorial. And it's a much higher alcohol, much darker, kind of even fruitier beer, which is interesting. Anyway, Guinness aside. So I'm curious about the community effort going on behind Shalaley. You mentioned air table as a connector, and that was contributed through open source, right? Yeah. What sorts of open source activity are on the horizon? Or what would you like to kind of recruit from anybody listening? Yeah. So Shalaley has an unofficial goal. So you should be able to query any URL on the internet. That's kind of the design principle. Like I want to have a library you can do. So like start from HTTP or even like FTP or Gemini or any protocol. And you get some data. That's kind of the, that's when I know it's done, when I get to that point. And I think the generic adapters, they work for X and L. They work for Jason for HTML. So they cover a lot of ground there. But yeah, but that being said, there's not a strong community. There's there is an issue open for like ideas for adapters. People can request their adapters. And to be honest, there's not a lot of contribution. I think because the generic Jason, the generic X and L adapters, they kind of cover most of the needs and a good enough, good enough approach. I think that's kind of part of the philosophy of Shalaley. It's like good enough is good enough. Yeah, that's fair. The HTML one is an interesting use case, actually. People ought to know if they're using SuperSet that you can actually just put in the URL of a website. It's great, but table. Yeah. Pretty crazy since there's actually so many websites that have up to the tabular data. And you can just nab that through SQL, which is really cool. Yeah. And I know when I talked about adding like an X-path adapter to that, maybe one day so you can grab bulleted lists. Or whatever else. Yeah. And again, we talked about this. And it's more like a design that it's not hard to do. It's more like, how do you make it? Because like I said, I wanted to be intuitive. I wanted to be like, I want to query this website. But then you need how to explain to Shalaley that you want to use an X-path versus you're just scraping a table. But those are so vulnerable problems. But then on the roadmap, there's not a lot of interested in different adapters. There is some basic stuff, like supporting Python 3.12. That's, I haven't been able to get that working. Mostly because the dependencies, they don't work well. Shalaley is also based on SQLite. So SQLite has this concept of a virtual table. So in SQLite, you can define a table that it's actually maps to a Python function or any function, like a C function, whatever function. But you can define a table that access gets mapped to a function. That's how it works. So basically, you're querying a table. It gets translated to Python calls. But I have a branch where I'm adding support for Postgres also. So instead of using SQLite as a backend, which is lightweight, and you might say last-perform it, you would be able to use Postgres and then Postgres will handle all the data crunchy. Especially if you're doing heavy aggregations or something like that, it's probably better to run them in Postgres. Those are the big things on the list. And what's, I think a lot of people probably don't realize that Shalaley is very much under the hood of Superset right now. So if you're parsing CSV or something like that, that's what's really happening. Yeah. And at preset, we also use Shalaley under the hood a lot. Because like I said, I try to make it very friendly for the developer. So if you need to do custom dialect, you know, SQL can be dialect. So it really easy to create pseudo database. So at preset, when you upload a CSV, there's a pseudo database that you upload a CSV, it actually uploads to S3, put it in S3 bucket. And then when you do metadata calls, or you do queries, it actually translates to S3 calls, and then equaries the file. It stores S3, so it gets the CSV converts to Park K. It stores in S3 when you're on queries, you will run the queries against Amazon using S3 select, which is an API for running queries against S3 that Amazon offers. So for the user, it's a database. They upload their files, and they query their files. They have no idea what's that. There's no database. It seems like there's a database. You know, I can go and run queries, and look at the tables, and do whatever I want. Behind the scenes, it's basically uploading to S3 and running queries against S3. And it's a nice solution for us, because we encrypt the data in S3 with a customer key. So it's encrypted at rest. We don't have to worry about that. And we don't have to maintain a database with customer data, which is, you know, could be complicated, because of isolation. So it's a simple solution. And then the all I can say, Google Sheets, SuperSet has this, it's a terrible name, but it's called the meta database. I think it's called not to be confused with the meta-data database. Yep. And because another thing some people ask a lot in SuperSet is like, you know, SuperSet allows you to connect to all your different databases. So I have, OK, I have my press though here, I have my posters here, I have my Google Sheets here. Now how do I move data around? How can I run a query, you know, joining my press table with my SQL table? And so she lady in SuperSet has this concept of a SuperSet database where every day, yeah, you can basically query across your database as do joins and whatever you want. So that's part of SuperSet. Yeah, I think those are the big use cases. Yeah. And of course, for anybody listening, they want to experiment with that. There probably are some limits of reason in terms of joining across those databases using the meta database. Yeah. Well, I guess we'll figure out where those boundaries are in practice this time. Well, I think at least in, in PreSet, well, in Open Source 2 in SuperSet, both SuperSet and PreSet, there are St.D.Faunts, you know, where you can't do a cross join from a medium, a medium, a million rows from one day. I would actually start with this. Not gonna just like melt down the server or something. Yeah, yeah. So it actually, it limits, when you do a join, it limits each side to a thousand rows by default. Of course you can vote that. And you can also enable it for database. Like if you have a database that's more expensive, BigQuery, you don't want to run something crazy there, you can just disable the meta database there. Okay. And speaking of making more people aware of Shalili, I think we're about to do that. And you and I are collaborating on a little bit of an effort that's a small part of a bigger effort. What we're working on for anybody who's listening, and we might have heard of this through other channels, is creating a SuperSet community dashboard that will be an example dashboard in SuperSet. So starting very humbly by scraping a bunch of GitHub data, so you can see kind of where things need attention, issues and PRs that haven't been touched for a long time, or, you know, gamifying things a little bit by putting some leaderboards up there and stuff like that. But we're also scraping a Google sheet, which I'm misusing as a database, and keeping all of our tech debt stuff there. So you can see how can we kind of harden the code base by getting rid of some of these warnings and then turning the rule onto really enforcement stuff like that. But I think over time we'll be comparing ourselves in terms of how's the repo doing, how CI doing, how our actions fast or slow, and all this stuff. So there's going to be a bunch of stuff going in there. But really, this is only the first of these kind of live example dashboards that we want to do. And this is going to be a part of an effort of creating a whole bunch of new examples in SuperSet that we want to sort of crowdsource if you will, make it a bit of a competition. And I think once we merge this new one, there's going to be a shalei database in every instance of SuperSet when you start it up and load examples. And that'll open the door, I hope, for others, including you listeners, that you can now create datasets that are connecting to stuff on the web, and basically anywhere, and start building examples around it. So things stay up to date, and they're much easier to build and contribute. And then we can kind of... And also, the process, you can correct me, because you went through this for disaster board. The process of adding a dashboard with examples to SuperSet is easy, right? Because once we have your first dashboard, you can view your own dashboard using the shalei database. You export it, you click it, you go into your dashboard, export, you get a zip, you add that zip to the SuperSet repo, create a PR, and that's it, right? That's really it. So the shalei database will be built in by then, so you don't have to worry about adding that, YAML file. But all you have to do are add the datasets, which are basically shalei queries, and then add your chart YAML files, which go in a nice little folder, since SuperSet doesn't actually care what the folder structure of those is. And then your dashboard, YAML file, and that's it. But you don't need to write those YAML files, right? You just build your dashboard live. Yeah, build your dashboard on your preset instance, or your open source SuperSet instance. Export the zip and load it to the YAML file. So yeah, yeah. So hopefully we'll get a bunch of, yeah, I always like disliked the examples that come with SuperSet. I never had bandwidth to fix them, but I felt like they were nice in the beginning to showcase the different visualizations, but the data was stale, right? Like, I don't know. It was always like the same data that ended in 2017. And it was it. There was an effort by Shreini. He had a newer dashboard, newer examples that look way better, but still, it's like every time you go, it's the same thing, the examples, right? So having the live data is interesting, because every time you install SuperSet and are you open SuperSet, your examples will have fresh data. Yeah, I mean, so I think Shalali is the perfect tool for this, because it connects to things like the weather APIs. Yeah, yeah. It's called weatherAPI.com. Oh, OK, yeah. Clever naming. But weatherAPI. So we could build a weather dashboard and have filters that let you pick cities and stuff like that and allow people to connect to much more current things. You know, you can connect to the most tables from Wiki pages and show the most. One thing I want to do it some of my list is to add Google Calendar as a source. You know? That'd be good. Because then imagine you're looking at some metrics, right? And you can overlay, because SuperSet has support for annotations. So imagine you're looking at some metric, but then you can have those annotations, a data set that is, like, holidays, you know? So that's just a Google Calendar. You point to it and then you have these holidays. And then you can understand your metric. OK, here you went down, but it was a holiday, right? Yeah. You don't have to worry about keeping that. There are public Google calendars of holidays. You just point to one. And it's always up to date. Yeah, that's going to be fantastic. Because I think a lot of the examples right now, just by nature, they age. We've got a COVID example dashboard. And we're going to post COVID. It's still a good dashboard to see how to build charts. It's like, OK, we need something more contemporary. So yeah, call to arms. Everybody is listening. Build a dashboard using some really merged on to my chart. Yeah, we should run like a hackathon or something, a challenge or a competition. Well, I don't know if we're talking about this. I guess, consider this a pre-announcement. We'll announce it more officially. I think Prisa is going to sponsor a bit of a global dashboard building competition. Oh, I did know. Yeah, yeah, this is going to be a whole thing. So yeah, there's too early to say the details. But we do want to put some prizes behind this and do a lot of outreach so that other people can build dashboards that relate to certain industries, let's say, or just typical markets. Like, there ought to be examples built into superset that are like marketing dashboards, sales dashboards, which do health care dashboards, inventory dashboards. Climate change. Climate change. All the things, crypto, you name it. Yeah. Stock market stuff. But all of this data is out there. And I think if we build these examples, then hopefully more people in the world will see superset as fitting their use cases. And we can grow adoption that way. Yeah. So that's the goal. More on this coming soon. And yeah, we'll start waving that. Sorry for spoiling that. I didn't know. Good thing. It's good to call this the teaser trailer. You can see the need is there, you know? Yeah. Yeah, there's a need. And we have a tool, Chilei. Thank you for building it. And from there, we'll just plug everybody into it. And yeah, get into building. So perhaps that's the right place to kind of end this episode is that little call to arms. Use Chilei. Wait, there's one thing missing in this episode. Oh, you're right. Yeah. I forgot to ask the important, this is the second time I forgot to ask the important question. Has a little bit of a test of character. What's on your desk? Yeah. So today I have on my desk this. Oh. This is the, have you seen this? I believe I have. Is that the one you had on the train years ago? Or is that a new one? Exactly. This is the teenage engineering OPC. For those who are not watching the video, this is a synthesizer, sampler, sequencer. Drum machine, sequencer. Yeah. About the size of a chocolate bar. Yeah, or a TV remote. So it's a gray rectangle, nine inches long. I don't know, two inches wide, very thin, no screen. And it's amazing that it has an interface where you know what you're doing, where you are, and just by lighting up numbers and LEDs. And like the UI is amazing because we'll indicate where you are with color, but because some people are colorblind, it also indicates with numbers. So there's always like two ways of indicating what's going on because it doesn't have a screen. And you can use your phone as a screen too. But yeah, but like you said, Evan, this is a synthesizer, drum machine, sequencer, sampler. I've made like whole albums just with this. You can make a whole song. And then you can record it to your phone digitally. So you plug it USB to your phone. And it will record a digital signal super clean. And yeah, it's my favorite instrument, the OPC. Very cool. So for now, we'll do these little AI theme songs, but maybe going forward, we'll start right now. Oh yeah. Yeah. That's a leverage. Very cool. Well, cheers one last time. Cheers. Happy Friday. Fancho. And thank you for joining us. And thank you for Shilaylee. And thank you for telling us the pleasure. Yeah. And for people listening, if you want to contribute, it's open source. You can find the repo if you Google Shilaylee, which is hard to spell. Just go to SuperZat and you can find it. We'll post a link somewhere. But yeah, there's documentation. If you want to contribute, there's docs for developers. If you want to add support for a new API, there's skeleton template. There's documentation explaining, step by step. And if it's something's not clear, also just fire a ticket. I'm happy to help. Yep. So start scraping that data and get a head start on this competition. Yeah. We'll be calling out soon. Yeah. Thank you. See you next time, everybody. Thank you. Thank you, everyone.