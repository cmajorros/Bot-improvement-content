 Hello everybody and welcome to the now second episode of Designated Driver, the preset podcast where we have a beer with a different database centric team or person and beer being optional of course, but we just want to talk about database drivers and Apache Super Set and all of that good stuff. We'll go ahead and do a little quick round of introductions and I'll go first. My name is Evan Rusakis. I'm a committer and PMC member on the Apache Super Set project. I'm also a total beer nerd of all sorts. So combining these two things is fun for me and I'll go ahead and pass it over to Beto. Hey, I'm Beto. Beto Jameeda. I'm a software engineer, also committer, PMC member on Apache Super Set. I work across the stack but a lot of the stuff I love doing is connecting Super Set to databases, making sure it's easy to connect and you know, like we want people to jump into their data when they're using Super Set. Yeah, so that's me and I'll pass it on to you Jordan. Hi, I'm Jordan Tagani, co-founder and chief duck herder at mother duck. I am like also kind of a beer nerd, but today I'm having like kombucha and not actually not actually beer because it's only mid-action in for me and I get a bunch more meetings. I don't want to take a nap. But yeah, excited to get a chance to chat with you folks. Fantastic. Usually we do a little a little round of our beer introductions at some point during this thing, but I'm curious what kombucha do you prefer? I don't actually like kombucha. I was just like trying to find like what is the closest thing that we have at the work fridge to beer and this is what this is what I came up with. But I am sort of an IPA IP A nerd. I live in Seattle and sort of fit many of the Seattle Seattle stereotype. Oh, cool. There's a lot of good beer in that area. I can attest to that. Well, maybe we should go around on that front. Beto, what did you bring today? Yeah, well, I'm in Miami, so it's 430 here, 435. I try to get the closest thing to a duck related beer that I could find. So this is a Goose Island IPA. Yeah, it has like a goose. And like, I mean, goose duck, you know, that's the difference. I was a big fan of Goose Island. I feel like the quality kind of went downhill from there, but also it is appropriate for the conversation. So that's great. Yeah, I got stuck in the same place. I also have a goose island beer. I have actually the same IPA in my fridge. But in diversifying things, I went for one of their fancy schmancy ones, which is the part of their bourbon county barrelage imperial style series. What's the percentage on that one? That's an excellent question. Let's see where it says, I'm guessing it's around 14%. Oh, it's 12th. So I'm going to need that nap. So now we can play. Now we can play goose goose duck, I guess. Sorry. Yeah, I used to have a beer that was called duck duck goose. Goose is a style of beer. Yeah, exactly. You know, all right. But that beer is exceedingly rare and worth a lot of money and I drink it all. Like there's either my broke out on a special occasion once. Anyhow, you know, what's the, you know, like about consumables is if you don't consume them, like you can't just keep them on a shelf because if you keep them on the shelf, they go, they go bad. It's true. I actually drink it. I had to have them with some like some wine. I had like bought some nice nice ish wine. Over the like the last 20 years and just kept it my basement and then during the pandemic. I'm like, actually, she probably drinks some of these wines if the world is ending. And then, you know, crack them open and it's like, this is kind of vinegary. Oh, it's a good good lesson. Yeah, it's true. I think beer's the same sort of way where certain types will age well, but others are not so graceful. I have to imagine during the pandemic, probably half the world drank up their sellers and the other half started new ones out of paranoia. They replaced the wine with like paper products. Right. Those were the days. Well, let's talk shop a little bit. Maybe Jordan, if you don't mind, can you give us a little bit of kind of your origin story with all things duck. Yeah, sure. So, you know, I was I was in Google because I thought like, you know, I was really into big, big data. I thought big data was going to change change the world and Google sort of had that figured out more than anybody else. And I helped start Google BigQuery and you know, worked on that product for for 10 years and kind of saw a lot of like big, you know, data sets and big big use cases. But one of the things that I also noticed was that like the vast, vast majority of people didn't have giant amounts of data. And like people, even the people that did have a lot of data, like they only ended up using his, you know, a small portion of their data. So it's like you had all this, you know, massive power and that we had designed, you know, all of these complex systems to deal with giant data and that the people, you know, didn't really didn't really need. And so kind of started thinking there might be another, another way, ended up moving to single store for a couple of years, you know, working on their database and then their database is a service. And so some of the similar things and just also people wanting a smaller version. People like also that like we had really successful customers running into single node, which sort of blew my mind because it's like, hey, you know, like the whole point of, you know, building these, you know, modern data systems was to scale scale out. Like what are you running the single node? It's so much simpler and, and then I ran into this database called ductyb. Kind of we saw it on some like competitive benchmarks and it's like, kind of came out of nowhere. It's like, wow, this is like, this is pretty cool. And, you know, it was a single node scale up super fast. And, and it's like, hey, you know, if the, you know, people don't need massive amounts of data or don't have massive amounts of data single node works really well, something like ductyb could be amazing. Somebody should build that as a service in the cloud. And, and I thought, maybe, you know, I worked on a couple of cloud databases of service. Maybe I should do that for a little while. And so it was planning on hacking on something for, for, you know, as a side project for a little while. Ended up sort of accidentally raising money and starting company based on it. And that was just about two years ago. And, you know, we've been sort of going, you know, ever, ever since. And so ductyb is part of the duck foundation. How long has that been around? And what's your business's relationship with that foundation? The great questions for the ductyb foundation was started about three years earlier. So ductyb was started about three years earlier. So I guess they're about five years old. And it was started by HANAS and HANAS will ice in and Mark Ross belt. In, in Amsterdam, HANAS was a database professor at CWI. And Mark was a graduate student. And HANAS had just gotten tenure and, and so had some time to kill or nobody was going to tell him like not, you know, what to do. And Mark had finished his PhD papers. And so kind of had some time to kill. And so like, you know, they had been working on known ADB, which is kind of older and pre-gear. And like, we should, we should start something from scratch and make it, you know, make it really good. So they turned out to be incredible engineers as well as sort of database academics, which is, you know, very often not the case. And so database people tend to be pretty good, pretty good engineers. I don't know what it is. But, and so they built, they built this sort of ductyb thing and sort of it grew and grew and, and then they put a foundation around it to sort of maintain the sort of integrity of the, of the open source project. And then so when I actually sort of first, first contacted them, I was actually looking for a job. I'm like, hey, you know, like any chance you guys, you know, would want to build a cloud service. And like, I'd love to do it with you and are you hiring? And like, well, we kind of really wanted to focus on the core database. But we'd be really the partner, happy to partner with you. And, and so that was very exciting and heartening. And, and so kind of what we did was, you know, we basically gave them a co founder share mother duck would be started. So like, you know, they're not doing the venture back thing. But like, they have a co founder share. So they have upside if mother duck works really well. And exchange, you know, they gave us an exclusive they won't work with anybody else is doing something similar and, you know, we, we give them some funding to help, you know, build out the core, the core database. And I think it's a really, this really nice symbiotic relationship because they get to do the thing that they love. They love like building an amazing, great open source database. And they, you know, they want is they want, they want to be ubiquitous. They want everybody to use it. They want it to be, they want it to be awesome. And I think also for the, you know, for the people that rely on that, people are excited about, you know, duck TV is open source project. You know, they also can, can trust that like that, they're not going to try to, you know, change the license at some point because, you know, they are really kind of have this, they're, they're not. They don't have like somebody, you know, shareholders telling them they need to go and like, different. Only other than they do get to see, you know, think sometimes with open source projects, people don't always see the upside from, you know, if somebody builds a company around it. But in this case, they actually, they actually do. On our side, we get, you know, we get this sort of close partnership. Kind of they've built a bunch of hooks in duck TV for us. They build a bunch of features for us. So it's been a really, really great from our perspective to work with them. And, you know, we also benefit from sort of the halo effect of being close, close to the, to the duck TV team. Like we have distribution in duck TV. So in like, if you change the database name to start with MD colon, it just, it starts running into cloud and mother duck, which is sort of a really, I think a pretty unique. Sort of local to kind of cloud, cloud thing. And then that's that was enabled by the, by this, this relationship. Yeah, that's a really unusual and interesting and pretty dreamy situation to be honest of, because you know Apache supersets part of the Apache software foundation. And there's a whole ethos around the idea of vendor neutrality. And, you know, you're not supposed to be promoting any commercial offering within the open source, you know, realm, I guess you would say. But that's all fair game from where you said if you're actually in that official partnership, and you're not, it's not just that vendors are acceptable of it. You're actually the preferred vendor and it all works out very smoothly. I'm sure. Yeah, I think for Apache, you're even discouraged from putting your job title in the email, right in the mailing list. Right. Because your job title shouldn't matter inside the Apache software phone. They sent some people with, I don't know, VP of engineering and they say, hey, nobody cares. Don't put your title in your emails. It's just commit her versus not commit her. Right. We're all come to see individuals of equal merit until we've grown more merit. So, yeah, I'm curious. Like you guys have been growing and blowing up a lot in terms of exposure. And obviously we met because there's a, a superset and mother duck integration that works beautifully. I do use it all the time when I'm doing demos and things because like you said, you don't always have giant data. You just want to do something quickly and easily and smoothly and you take all the boxes for that. So thank you. But yeah, what, what other kind of trends or things have you seen evolving and kind of the integration landscape? First of all, like, you know, I also use the preset iteration, like kind of the a lot of our, you know, key customer dashboards are our preset. Obviously our data warehouse is is mother duck. But we do really like the, you know, preset. We try to use a variety of things internally. You know, just because we need to make, you know, we want to sort of dog food, the duck food, the ecosystem. And I think that's been, you know, been really nice to be able to sort of wreck because it's one thing to like you often build a connector to something. And this is sort of experience that I had in BigQuery is like, is like, you build a connector. And unless you actually put got it, like she actually use it for real stuff that then it's going to be crap. You know, it's going to be somebody is going to use them with a bigger, you know, wire schema or they're going to try to do something with like, you know, kind of more complicated. And like it falls over and then they complain and then, and then, and then you get into this sort of nightmare of like, you know, the end user of this bi tool complains about something, you know, is it the bi tool is the connector is your database. Is it like the user doing something goofy. How do you get the logs like how do you like. And like that's not your cost is honestly even your customer that you know, like it's just really, it can be really difficult. And so I think it's important for us to sort of really build some high quality high quality connectors and and you know, working with the preset folks has been has been great to get a to get a high quality connector. One of the other things that's sort of interesting is is the way, you know, ductyb and mother dot work is our client. The ducty the mother dot client is ductyb. So every time duct every time you're using mother dot you have ductyb on on the client side if you're using like a JDBC driver, a JDBC driver has the ductyb library inside of it and all the ductyb code and it's a full blown ductyb database. But then it can talk out to mother dot or likewise the the preset connector are the superset connectors both have ductyb in it. So I want cool thing is that like, hey, if anybody's building anything to connect to ductyb, it just works with mother dot because of the like this sort of like you just changed the database name. Also, we can, you know, we can push workloads down to the client. Sometimes that's not desirable. So like in in preset, you know, we turn all that off so that like it's not actually trying to run stuff on your on your cloud cloud servers. But it can be very nice to sort of do local do local caching as well. And you know, I think we're, you know, we're going to be sort of also building a lot of a lot of features from from that. That is super cool. I always wanted to have like a smart cash in superset that was SQL where, you know, so if you ask for some aggregation by country, it would cash that and then when you ask for the aggregation overall, it could just reuse those results some across country because in this case, country's additive. So it seems like it, it could use. Like this, right? That's just kind of a smart cash. Yeah, I think that's exactly the exactly the idea is like, you know, you, you know, result cash is and then, you know, result cash is can be even considered sort of like a materialized view. I think very often, like, and I think in the it be it was just likely the same, the same as like, you know, you, you click on something and like you do a drill down and then you go back. And you know, basically all of those steps are highly cashable. And even like you do a drill down, you know, you, that drill down may be able to be satisfied from answers you have already computed. And if you have those things cash, then, you know, it's basically, you know, it's a materialized view resolution problem. You know, versus like, and so I think there's some really, there's some really cool things we actually have, you know, an engineer working on right now. And, and yeah, we want to we want to push the like, you know, push the envelope with that, but we also want to need to make sure that like kind of just the core meat potatoes things work first. Yeah. Can I ask a question about like, is about the audience? Because I've been reading, I used to be a climate scientist. I use SQLite a lot. And recently recently I've been seeing this article is recommending people to switch from SQLite to the DB for like scientific analysis data science. Is that like a core group of your audience or is it just like something that is starting now? So one of the interesting things about Doug TV is that there's just a really, really wide variety of like use cases, like there's data scientists, there's data engineers and analysts and, and then there's just there's developers and there's people that you know are using it kind of in the back end to translate data from one format to another. And it's just lots and lots of things you can use use Doug to be with. And so it's a goal with mother to be able to be to be able to work with all those things. But in terms of like the audience that we're really kind of going after, it's really to to, you know, ideal customers. The first one is just is kind of people who are building, you know, doing sort of data warehousing and you know, sort of lightweight data warehousing. Maybe I don't maybe you only have like a couple of terabytes worth of data. And you know, we can make that really fast and probably in order of magnitude less expensive than other other options. But I think there's a lot of people that you know for whom that is a, you know, that's something that they care about. And then the other one is like people who are building applications where they want to show data to their end users. A lot of people are showing like kind of observability data to their end users. You think of like a stock portfolio or like straw or you can see like your rods to be able to dig into dig into things. Or a CICD tool where you want to show like what's the history of like build times over, you know, like you can drill down by by user or refone, etc. So I think there's lots of these use cases and mothered up work really well, partly because, you know, we can run a single ducty be instance in the cloud, the can auto scale for each one of the end users. We get up hundreds of thousands of like we call them ducklings that run that run in the cloud. So you don't have to like bid pack or size them. We can auto scale them up with me. He scaled it down. They scaled out to zero. You know, partly because ducty be has such a small footprint. We can run really, really tiny instances for the tiny customers. But then we can scale it up. And I mentioned kind of scaling scaling up like we can scale up to the size of, you know, the size of the largest EC2 instance. You know, roughly the amount of hardware that's in a snowflake 3 XL. And so, and we can do that per user. So if you have a thousand users, we could run one of those per users. Our thousand giant users, but very often as you have one giant user and then it's middle users and some tiny, tiny ones. And we can just sort of make that, can make that all work. And so that's really nice for for a lot of these app developers. As well as like this hybrid execution where we can run stuff on the client. You can run stuff in the browser. So like running in wasm, like ducty be runs in wasm in the browser. And we can do stuff that's like 60 frames per second. It's like a video game like flying through your data. And that's also the kind of things that a lot of times people have. They just haven't seen that that kind of interactivity before. And you know, so as app developers are like, hey, that sounds, that sounds kind of cool. Yeah, definitely. I was checking out the wasm implementation. And I was that was surprised that even exists. That's it's a very cool thing. Just out of curiosity as we get a little low on time here. Is there anything released recently that are that's coming up on your near ish term roadmap horizon that you're excited about? One thing is you know ducty be is going 1.0. So it's at 0.10 right now. And for the last like three months, they've really just sort of been focusing on on bug fixing stability. And just sort of like making work they stabilize the storage format. And they, and you know, they're just they're they're. You know, they're not working on performance really. They're working on just how do we how do we how do we get to 1.0. And so that's going to be kind of probably the end of end of June or sorry end of May early early June. And so kind of we're kind of timing a lot of you know, other features as well. This would land around around that same time. But that's really sort of a like, hey, this this is not ready for prime time because a couple people have like complained. Often based on sort of older information though that like, hey, I was running ducty be in like right out of memory or like, you know, some of these queries, you know, didn't didn't do so well. And, but I think it's really getting it's really getting ready quite quite fast. So I'm really excited for this for this 1.0. You know, we also are adding organizations tomorrow actually is when that is when that's going to launch. So like just the ability to sort of work with your team in an organization and you know how. You know, be able to share within the bounds of the organization and. You know, that's sort of a nice feature for people that you know, hey, I have a small data team or a small, you know, and I just want to build a data warehouse for my for my company. And that that that's going to lend very soon. Very cool. Thanks. I guess in a similar way, we just released the patchy superset 4.0 and for anyone that's listening and is not aware, mother duck and ducty be are supported it on open source superset if you install the appropriate drivers and do the setup. But it's also available out of the box on preset just sign up for free and you get instant access so that's. It couldn't get any easier. It does work very well like I've tried that out even I can do it. Anything else from your side, Beto? What anybody else like any other announcements for that matter? What it just to add to what you said there was if you are from from mother duck recently that made it even easier to connect right where you can. Like now the the model where you can figure the database is custom made for for mother duck and you can with one plate you can get your access token and then. And then just connect it's even easier. That's right. I saw that that's very cool. So it's kind of just a very short loop to instantly grab that access token with that having to look up in the docs or dig around in your account to find out where it is. So yeah, it's pretty cool. That's a first for this particular product. Yeah, exciting. Cool. Well, all right. Well, cheers. Thanks for coming on today. It's a pleasure to have you here and yeah, keep us on the loop if you ever want to do this again after kombucha hours or you know there's a whole world of hard kombucha to you. You want to have the worst of both worlds, I guess. Yeah, thanks so much. I enjoyed it. It's fun. I always fun to come chat. All right, like what? All right, take care. Thanks.