 All right, we're on the air. Hi everybody. Welcome to the first episode ever of designated driver. The casual happy hour ish or happy half hour ish podcast where we have a beer or whatever other beverage of choice with our special guest from a different database community on every episode. Let's go around and maybe just do some, you know, the self introductions. We can introduce ourselves and perhaps introduce the beer or other beverage we're having today. I'll go ahead and go first. My name is Evan Rusakis. I'm a PMC member on the Apache Superset project and a developer advocate for preset. I also have a longstanding interest in beer. I'm a nationally certified beer judge and just beer nerd all around. And to introduce my beer of the day, since we have a guest from seller data, I thought I'd try to find something relevant. So I picked something from my seller, which I used to keep data about the seller. I used to have a spreadsheet of all my seller beers. So this is a Belgian quad beer from a trappist brewery called Spencer that went out of business. I guess the business model didn't pan out for the monks. So this is the last of them. But anyway, that's me. I'll pass the mic over to Beto. I'm Beto. I'm a software engineer at preset. I've been working with super set for six plus years since 2017. I do a lot of the database integrations. So I wrote like C call can be drivers for druid for Pino for Google sheets for a lot of stuff. So this is this is really fascinating to me just understanding different databases, how they work and and how we can like visualize their data. I'm in Florida. I moved here two days ago. And the beer I chose is not from Florida. I'm pretty sure this is from the west coast. Evan would know. Oh, yeah, at least he is. So this is the space this IPA since we're going to be talking about star rocks. I thought well star rocks they have space dust on them. And with that, I'll pass it on to our guest Albert. Hey guys, I'm Albert Wang of the developer advocate at seller data. So formally red had formally MongoDB. And then now at seller data. So seller data we we build a product called star rocks. It's a Linux foundation project. It's a old app database. So we play in the same spaces as snowflake red shift big query and the like. So as a Linux foundation project, you kind of know that you give up your trademarks right so to the Linux foundation right so we can't call the company itself star rocks anymore we originally did. And then so it's called seller data, which is ladded for seller means quick so it's like quick data. That's how we got our name. So yeah, that's that's the company. And today's beer I have is a so Cal favorite green cheek. I don't know. Evan, do you know these guys? I've heard of them and I yeah, I've looked them up and I looked up that beer to actually it's milk shake IPA, which is a whole interesting thing. I'm talking about that. Yeah, yeah. So these guys are one of the best IPAs in in Southern California, right. So I was joking with Evan because if you're a northern Cal person, you're usually a race or five guy, right. Because that's like a old school, right. And for so Cal, there's a bunch of breweries, right. But this is this is one of the older ones, right. We got two locations and they have a lot of interesting different IPAs, right. So but cocoa, I thought it'd be a little bit different. It's tropical. And you don't see how many coconut based beers do you see, right. Yeah. Yeah, maybe like porters and stouts perhaps, but not too many in the night. Yeah. Well, cheers. Thanks. Welcome. And yeah, I've got more questions, but first things first salute. So I guess, well, I'm tempted to dive into the topic of a milkshake IPA. Maybe we'll follow up on the beer later once you've had a few tips and see how it is. But I'm kind of curious to hear a little bit about your origin story, both like, you know, why and how star rocks and seller data kind of came into the universe. What was the what was the moment where somebody woke up in the middle of the night said this needs to be a thing. And you know, how did you get involved in that project. Yeah. So, so actually we're a fork of another project. So a patchy Doris if you're familiar with them, right. And so our founders wanted to fork a patchy Doris for many reasons. They wanted a CBO. They wanted a different vectorized search engine. They also thought that the idea of a data lake house was the future like five years from now, everything will converge to a data lake house, right. So for people who are not familiar with that concept. You know, traditionally, it's always been two kind of ideas of of long term data storage, right. So everything that's curated manage that's in the data warehouse, right. And it invokes this image of like Indiana Jones and I've got to. I've got the and I'm going to take it on in and I'm going to like, you know, do some data cleansing and we're going to do some category management and the guy the low guy in there. It's like, so data is the low guys pushing it into the warehouse. We're going to push it out and it's going to be available to everybody who wants it, right. And so, you know, that's always been the data warehouse and maybe like I would say like 5%, or even less of all the data that's actually generated by your company actually goes in the data warehouse, right. It's like KPIs, everything that really managed and everything else, you know, structured unstructured, what's thrown into the data lake. When you ask people what a data lake is, you know, some people think it's like a bunch of hard drives that they store long term in maybe somebody's a little bit more sophisticated and put it on a doob on high, right. And then the newer generation is like we're going to put say, for instance, part K files on s3, right. And the idea was like, well, why do these two worlds have to be different, right. Why can't they just be the same thing because you want to get value from your current data and historical data. So why can't you build a quote unquote data warehouse features on top of the data lake. So you get things like materialize views, you get subset and response times, you get all the things that you were kind of like promised, you know, with this whole new day of data and the idea of the last day, capabilities and whatnot, right. Anyways, like most open search projects, the founders kind of like said, we want to go this way, the project didn't want to go that way and then say, okay, we're going to fork it, right. And so the fork became star rocks 90% of the code base got rewritten. And so if you see some of the things that we've done like we are claimed to fame here is like, you know, really fast on joins at scale. So we're talking about we have like a community user that's like 10 petabytes, they're using a patchy iceberg and ad hoc queries are less than two seconds across anything across all that to that 10 petabytes of data, right. We also support hoodie, Delta Lake, Apache high, PIEM on right. And so we got that the other thing we're really good at is separation computer storage. So you can have is basically the same as the snowflake inquiry architecture. We also support the redshift architecture, which is kind of like what the storage can't compute is co located. So both models, right. And so as with any open source project, we That the all the source code is available on GitHub. We do have a commercial offering a managed offering. There are some components that are not available in the open source versions mainly all around the security. So if you're talking about the encryption at rest, things like of that nature, right. Like they are not in the community version, but we're not keeping keep it. You can do all the materialize views you want. You can deploy as many as you want. And you know, we actively encourage it, right. We think that there's a lot of value to to like this is an area like all that database is not an area that most people have spent open source time in right. So we think it's a exciting thing to do. Can I ask a follow up question like how do you manage the so the features that you provided in the commercial offering like how do you implement them or they like plugins. We have an encryption plugin or is it a different cold base. It's not a different code base is basically as far as I know it's shims. Right. So the shims are just you know there as stubs and the and there is no code that it just basically calls empty code right. And I think this is a larger picture of just like our monetization model is very similar to other open source projects, right. So when I was at Mongo, we always use the acronym called mo app for commercialization, which is am for monitoring. Oh, for optimization a for automation and be for backup. So if any of those features fall fell into those categories, we would go and say that's going to be an enterprise feature. Now we've kind of added it over time. So it's mo lab ss and the extra s was security features and the other s was support right to the idea here is like any of those six categories right. The idea here is like why would a you know why would a community customer need is like enterprise like specialty backup or security features right there. Like you know if you're open source project right you wouldn't need any of those type of things right you know that was the argument right. So I think a lot of open source companies also like run from a similar acronym right. You must be hard you find a really good acronym and then somebody says what about security and you're like no, we already have the acronym. And then eventually there's two s's and then you're like fine, that's changed the acronym. Yeah, definitely there's always it's kind of interesting, you know, we always have like you know we're very inventive right we you know everybody's built on top of other things right. You know other people told me or like if you look at the history lesson like you know data warehouses came in the 1990s right and then the idea that came on out was just like you know. You know, Hadoop for for for more of long term storage spark came on out as a better way for you to go and do you know processing from that standpoint. Treno came on out to go and basically beat spark right I mean you know it's this competition that involves just like Moab and then you get the extra s so that you got the extra s and nowadays it's just you know that. The expectations from the community is like you got to have everything that was like in legacy right plus all these other benefits yeah right yeah yeah and it's tough because it's like there's a lot of engineering that has to happen and there's a lot of like technical debt that gets dragged with it yeah. And that goes to a question I have you mentioned you like that when you did the fork from Dore is I think 98% of the code was really from scratch. My my thing my internet is a bit bad but like you mentioned 98% of the code was written from scratch is that because you're using a different language or just like different paradigms or what was the reason for such a big read right. So I think it's a lot of it was the the core understanding of the product itself or the core thinking around it right and so there are some like architectural concepts that the founders really like like they. They emulated the my sequel wire protocol and so they wanted to keep that as that and the way that you know those the framework work was was very nicely designed and the architecture where there's only like two layers of nodes there's a front end node that doesn't my sequel emulation and then there's a storage nodes that. Persist and read the data from from S three buckets for instance right so they like a lot of that but the problem is is that when you when you look at what you're going to highly optimize for. The problem becomes that you're looking at it is like well I really need to change some of the fundamental building blocks of the application to and we get this we get this comment all the time of like. Like all of us build software right we all work a company is built software and once you get picked up architecture decision it's really tough you know three versions later four versions later to go and say. I really didn't like for we need to really restructure the base but it's going to change our entire code base if we do it yeah it's very risky and we don't have all the test cases and it's just easy for you to just launch a separate new product yeah kind of like have a side by side to see who will do it on out and the people are looking at you guys you guys are ludicrous why do you want to have two separate development to use two separate this and you're like going well. Like well like that's the thing the new generation has all these cool features but we had to go and basically you know you know basically tear down the house down back to studs and rebuilt it back on up. So and and that's why if you look at some of the things the decisions we make so I can talk about all these great features in the product whatnot but there's a benchmark on out there called click house. Click on click bench right so click house built as a bench marking tools in the same point and you can see Apache Doris which the commercial version of the select DB and for the same queries you can see there's a drastic difference in response times right so people say we're exactly the same but I'm like well if we're exactly same we should be not that far difference maybe like 5% difference 10% difference but in certain situations we're like 50% fast or even 2% That's faster right and those are some of the decisions that we made to go and get that I mean and that's the thing is like you know it's very very tough you ask any of us and I think so the listeners on this call would say the same thing it's like well that was the best choice at the time when I make the same choice again it's like hindsight 2020 right yeah yeah. Curious about one of the other decisions that was made there along the road which is when you forked you mentioned you forked from an Apache project but you're currently a Linux foundation project and I'm curious what went into that decision or what were the you know logistics and licensing gymnastics that that entailed. I had the same question yeah yeah so that was a little bit before my time so we're actually Apache to licensed but we're part of the Linux foundation projects right. And I think one of the reasons why we wanted to go do that was that we're on the roadmap for CNCF right we want to be a CNCF project and it felt like it was easier to be a Linux foundation project to move towards CNCF sorry what is CNCF cloud native cloud foundation okay. native computing foundation right so that's where you know Cupernettis is based that's where container D is based cryo a bunch of you know Cupernettis projects are all there right and the idea is that they're all cloud native and we were kind of like the idea is that you know there's a lot of databases on out there that are traditionally built on VMs and they just do enough. To get you to make it work in a container but they're really still a VM based app right. Then we like to think of ourselves as rebuilt for for the cloud like our typical model is containers that we throw it on we give you an operator and it's not just the operator that you can just install we actually do some of the automation some the higher capabilities that you expect from a. From a cloud native project right and so this is kind of the growth that we want to go to and that's why we we adopted you know separation computer storage for people who are not familiar in the database world are people are listeners from not database world. They probably think we're kind of like crazy for that standpoint like you know for the longest time when you had the engine that did your database queries there would be local this attached to it right that was. Or or a sand disk that was attached to it right and I think so snowflake was the first company that came out with this concept right of being rebuilt for for the internet and so they built the idea of saying the compute is elastic and essentially it's stateless and. The storage layer is also elastic so the idea here is that you can elastically scale each tier independently so you can have. 20 front end nodes doing the querying but only five nodes and storage on the back end right or the reverse can be you know three front end nodes with you know. 10 20 back end nodes from that standpoint because you have a lot of data but not that many client requests is right and this kind of idea you know it for the people who are in AWS and rich if you guys know this you want to if you want to expand scale you have to like it's all like this is the building block this is the. This is the via that you get with the storage and you got to go like every single one built sideways exactly the same and you're like well why can't it be decoupled well it's because it's designed that way right. So I always started it's kind of funny and maybe it's for them like the app guys are always like it's like like you know what are you guys always stateless I think it's always like you know what do you mean you guys have all the same I said we're the state. State partner application. It's like point how. Yeah, it was all you want right. I guess nobody wants to be stateful right so now you're like delegating it further down you're like okay we're going to be like stateless competition and no one's and storage is going to be elsewhere. Yeah, I mean you can also make our human that the theoretically theoretically we're all talking about data structures and if you ask you know hardcore computer science people they're like why can't state just be why can't like why does it have to be sequel right why does it have to like why do we have to persist on to that right with the. I remember a time when it was like the 1990s and I don't know if you guys remember like object databases do you remember guys. Yeah object data like you so this the new guys don't get this they don't get any of this right so this is it dates yourself right yeah so you're like the idea is like you'd stand shape is a object and it would just serialize in memory it's how it's realized this you just look at everything is objects and you don't have this translation layer. Insuralization down to see all right and because my developers like customer dot first name customer dot last name like not same like that same like whatever the object is like that's i'll just hydrated if I need to but that's it and then we're like going well it's good for the developers and then we've got these analysts and they're not comp side people they're not developers and we got to give them a way to access this and we're like oh crap I mean. Like how we're going to explain objects to someone who doesn't program. Yeah. Then all the overings are kind of a good compromise right yeah I would say our orams is is a you know okay so so okay this may be controversial but this is the thinking in mom go right yeah. Thank you mom so I'm not going to take off and you know where different hat mom goes says like. If sequel won the information wars why aren't we just transferring sequel across the wire we tried it with XML we tried it with a whole bunch you know co well copy books we tried all this and eventually Jason one so Jason is the best way to send data from one system to another why can't we serialize. That straight into system why do we have to go and translate from one to the other like we talk. Jason and then we serialized it in sequel that's like saying I talk French but then i'm going to serialize it in Spanish right you're always doing this translation back and forth right and this was the pitch this is this the date they say the pitch is. Data that is stored together or data is access together or so together right and the idea is that if it's Jason you should just use one Jason all the way and they. Pass this in with like the mean stack like it was like like you're going to go no no no no only knows Jason no says everything is Jason mom goes stores everything is Jason right so you browser just code the way through instead of these guys that are like. John with this the C++ dad to like. Whatever it is right and to be honest it resonates with a certain set of developers right yeah right yeah there's a lot of simplification to it right. And so you know I totally I totally get that but the reality of it is that data is very sticky and it's very tough right and meaning that. You know sequel is developed in late 60s nearly 70s right and and the thing is is that you look over time is that it's adapted itself it's like the C++ it's just for. Or Java it's just like yeah yeah it just keeps on adding and adding you put the great the best ideas the best ideas of every single database in general generation generation of the 90s the 2000s sequences seek you know the SQL people have borrowed with the database and just borrowed all the ideas oh spark those parallel okay we're going to get parallelism on databases no we're going to. Whatever it is right they stole their best ideas and then made it as part of another sequel database right so. Because of this you can argue that maybe we're Frankenstein but I like to think of it is more like we fly kind of like. You know past and past and past and then and then for good or for bad we get all these sequel dialects yeah. You know it's kind of like you know it's essentially still the 1960s yeah. But the analogy so I always I live sequel and I always say that sequel is like sharks you know sharks they've been around for a really really long time like. And then they were like sharks they existed before trees existed so they were like swimming in the oceans there were no trees no trees had been invented yet and they're actually older than the rings of Saturn like before the rings of Saturn forms they were ready sharks yeah they're four times older than a North star Polaris I recently learned yeah yeah and they're around because they're really good at what they do that's why they're so old and that's why they have changed very little because they're like they're really good at what they do you know they make no sound. You know they make no sound and they can smell blood from I don't know miles and I think Seiko is the same is like it's old you know but it's still around because it's really good at what it does it's it's the clarity the clarity if you don't have to specify the steps you know just say this is what I want and then and then you get the data. Yeah speaking of being really good at what we do what we are here to do is get people to use these things so let's take a minute talk about one of our recent little breakthroughs that you know obviously we work with the superset program project and work on preset and recently we we pushed out the driver for people to just very easy peasy connect to seller data and star rocks with preset the driver is built in so if you're a preset customer you can connect automatically but Albert I was wondering if you'd want to tell folks how they can most easily try out or connect to star rocks and give things a test run. Yeah so thank you Evan so feel free to start out go to star rocks at IO you can get our operator and our Linux binaries there if you want to or we have is a free developer tier on cloud dot seller data dot com and you can provision out the service for you from that standpoint you just have to pay for the VMs but there's no enterprise cost there's no software cost from that standpoint and then that with pre-stat you're you're good to go right and you should be able to start loading data and and make those queries and joins and no more to normalization. Yep yep I've tried it myself we Albert and I did this a little bit together and by the way thanks for presenting a USA con that was really great appreciated that but yeah it's it's pretty straightforward so I highly recommend people give it a try and I think there's a there's a new version of star rocks as well that just came out I believe I saw you posting about that what's what what's new or what's on the roadmap that you're excited about. Yeah so it's three two so there's a bunch of different features from that standpoint so with this feature it's a lot of quality of life enhancements so better ways easier ways for you to load data and unload data from our system this is the pipes of file system we also do a lot of other things that's more like automatic bucketing recommendation for us to go and do some partitioning and whatnot right. So this as the three spec goes on we're really focused around several key things so number one is you know more core data warehouse features. Number two is that we want to be the fastest query engine for for data lake house products right and then number three is that the this separation compute and storage which we call the shared data architecture right we're enhancing that more and more with additional capabilities right so that you get more value out of the product. Yeah fantastic thanks and just checking in for a second how are your beers we haven't talked about that much. It's very creamy you guys got to try this you gotta try so this is this is like really popular if you go to angel's game this brewery is like a couple miles away and it is packed right. And so if you guys ever come down to Southern California right so there's two locations but I think they have this one and they have another one is a peanut colada which is with aged rum. Like a year and a half I think or two years and they sell it by the can. Okay interesting I have very mixed feelings about the milkshake IPA thing it's weird it's strange to me as you know I don't know lactose and IPA's it's a it's a thing but I don't know if it's my thing. This is my case that everybody's cup it to you there this is one of the high octane ones that not everybody loves. So you said that's a quad yeah so I don't know what the ABV is on this thing yeah what's the. It's 10.2 it's not crazy but you know for for middible but quite delicious it's too bad and we're not going to be any more of it. Evan I got to get you I got to get you both is the send you guys the the peanut colada because it's 16. Okay yeah I'm into that yeah yeah mine is a thing I think 8.2 yeah 8.2 I'm on my second one. There's it's very sorry I really do enjoy the high octane ones there's a there's a couple of crazy ones out there that are like north of 60% but they're still technically beer it's kind of crazy. Yeah I think the most like a holic one is the tactical nook your penguin right yeah that was I don't know if they still make that thing or not but then like they're. 23% or so yeah something like that and then the same Adams Utopia's ones are up in that range to and Sam Adams has one yeah yeah and there's yeah there's a whole lot of people that are playing around with this ice distillation thing where you basically freeze the beard and knock the water off and do it again and again and again. Yeah anyway fun stuff um I should I should bring it I bring it up to this other segment that we talked about before I don't know if you happen to have this thing Albert but maybe we could do the first iteration of the what's on your desk segment. Oh yeah so one of the things that I have that I cherish is I'm not sure if you've ever seen this. I've never seen one in person but I saw them on the internet a long time ago like the 90s internet and yeah that's so cool explain. Yeah so this is the curta right and it was developed by someone that was in the the camps in Europe in 19 and World War II right so he dreamed of both of them in his head and eventually it was a. The idea was a mechanical calculator and actually if you see the back of this it's actually says made in legends style. This model itself I actually have two models I'd be older one in the newer one so this is built in the 60s and up to the up until the digital watch this was the most sophisticated calculated you can buy in the entire world. And people would use this in rally racing they would do on this was this was your this was the info right so like you wanted to go do plus minus multiplication divide you carry this around and you flip up these switches so what happens here is there's various numbers right and so if you wanted one so this shows up as as one you actually turn the top of this and it increments one. And then if you flip it around and you put it in another number number and then flip it around that does the minus right and to do the location is that you just you just wind it X amount of times for that. And divide it you would also do it a different X amount of a Y amount of times but there is a. So where are some switches red, simmer black yeah we need to know clearly yeah yeah so that was actually for the so every three is is is a red one and so that way you can go and see the positions of the of the numbers from that standpoint and this down here is also the help kind of with positioning so if you wanted to say I was doing in like in thousands right so you know that this was the thousands position and. And what not right so because at the end it's just relative everything is just relative to each other so we just we start from just zero then we just figure that the first one is just single digits ones and then 10s and then hundreds right but what's interesting is that these need to be serviced there's only one person in United States that does services today right and because these are not made anymore since the 60s. The guy is a watchmaker and he has a little part so if you bet one of the rods you got to go and basically this guy has to go and melt metal and bend into the right shape and then put it back all together and there's a guy who built a 3D model of this so you can download it off the internet and it has an insane amount of parts. Is it the same size or is it bigger? It's bigger right so this just give you an idea this is this is kind of like the size you're talking about like maybe four inches right. It's like a coffee grinder basically. Yeah it's a yeah it's like a coffee grinder they actually call some people call it a pineapple some people call it a grenade. And so yeah it's and you think about it this was all dreamt up in someone's mind right I think the guy had to be thinking of just if you take it apart all it is is a bunch of different spring scares and very very smart ways of of notches to go and make sure that you're actually counting. You give me a favor and I don't know maybe some simple calculation or something trivial but I'm curious what it sounds like if you actually run it I don't know if you could put it by the mic. Yeah so if you if you turn around it actually kind of you can kind of hear it grind its gears and see here's the top that actually has the numbers and so you can see the numbers keep on moving on up. But it sounds very much like a old time you watch it's like when you when you when you push it around you can hear the gears all grinding to get to the next spot and it'll stop in various sequences and if you've ever seen. There's another thing I have which is the modern which is a different one have you guys ever seen ever seen this. No no no no turning tumble so it's a guy who basically built is a using marbles you can build a binary computer right nice and so the idea here is that every marble only has you know on and off right and so you use these little little drop in to basically say OK like you add one marble it's at zero if you add another marble it'll set it back it's said it's clauses. It's said it's a one but the marble drops right OK so you can buy this I was actually on the Kickstarter for this that's why I got. But he sells it now as a I think as a something how you can get off the Amazon now it is really really cool because I was trying to explain to my kids like how the world would be if you're based to you know like like you're like going like how do you get to the another number and you're like well. Well like you know what I mean it's something you have to draw yet yet yet that guy kind of like like like I'm a tactile guy and it's really hard for you to kind of like visualize like oh you know like OK so one one is like this number and one zero is this number right. You'd be able to count a lot higher on your fingers if we lived in that world. Yeah very cool well thanks for sharing that I think we should probably wrap it up in a moment here I don't know if Beto had any other burning questions or anything I don't want to cut anyone. Yeah no we could go on for hours but yeah this is true I think this is a good point. Yeah I see a shini in the background we could talk kendo but anyway but anyhow yeah I think we should probably wrap it up and give people a means to connect with us for for us on the preset and superset side you know it's best to reach out to us on the superset slack which I'll stick the the URL on all the relevant channels and videos and so forth but Albert if you want to tell people how to connect with with your communities as well that'd be great. I just join our forums or join our slack and you'll get a message from me one way or another. Fantastic well thank you thank you Beto and thank you Albert for you know joining us on the first episode of designated driver and we definitely look forward to the next. All right thank you for having me. Take care yeah thank you cheers.